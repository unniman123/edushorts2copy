# Branch.io Integration Summary for Edushorts App

This document outlines the comprehensive process of integrating Branch.io for deep linking into the Edushorts React Native Expo application. It covers pre-integration cleanup, SDK setup, implementation of deep link handling and creation, and a detailed account of build issues encountered and their resolutions.

## Goal

The primary goal was to enable deep linking for sharing news articles. If the app is installed, users should be redirected to the specific news article. If not installed, they should be directed to the appropriate app store (Play Store/App Store). FCM notification deep linking was a secondary goal, deferred for later.

## Phase 1: Pre-Integration Cleanup & Preparation

Before integrating Branch.io, several inconsistencies and obsolete configurations were addressed to ensure a clean slate.

### Codebase Inconsistencies:

*   **Issue:** The term "Edushort" was inconsistently used instead of "Edushorts".
    *   **Resolution:** Corrected "Edushort" to "Edushorts" in `screens/LoginScreen.tsx`.
*   **Issue:** The URI scheme `edushort://` in `App.tsx` did not match the scheme `edushorts://` in `app.config.js`.
    *   **Resolution:** Changed the scheme in `App.tsx` to `edushorts://` for consistency.

### Obsolete Configurations Removed:

*   **Item:** Removed `webUrl` constant (which was using `edushortlinks.netlify.app`) from `screens/ArticleDetailScreen.tsx` as Branch links would replace this functionality.
*   **Item:** `components/NewsCard.tsx` was found to be using a `DynamicLinkService`. This was noted for replacement with Branch.io functionality.
*   **Item:** Removed `https://edushortlinks.netlify.app` from `linking.prefixes` in `App.tsx`.
*   **Item:** Removed the Android `intentFilter` for `edushortlinks.netlify.app` in `app.config.js`. The `AndroidManifest.xml` still contained a reference to `edushortlinks.netlify.app` which was an oversight at this stage but implicitly handled by moving to Branch.

## Phase 2: Branch.io Account and SDK Setup

### Branch.io Dashboard Configuration:

*   **Branch Link Domains:**
    *   Default: `xbwk1.app.link`
    *   Alternate: `xbwk1-alternate.app.link`
*   **Branch Key (Live):** `key_live_lsvfoHjZGCGcuEseqCIYAompzweTIc13` (for production-focused builds).
*   **Android URI Scheme:** Configured to `edushorts://` in the Branch dashboard.
*   **Play Store Link:** User to provide the correct link.
*   **SHA256 Fingerprints:**
    *   Play Store: `71:B9:B3:4F:B7:9E:E1:1F:0F:42:88:AC:3A:94:BE:3A:4D:28:86:01:5C:11:51:2A:FA:95:FC:BC:06:89:76:6A`
    *   Expo (Local Build/Debug): `FB:40:4E:67:63:C4:F3:4A:B4:78:9A:07:5F:F0:35:59:53:50:83:A9:BE:C2:FF:A3:BD:89:A3:19:AA:A9:4C:45`
    *   User was advised to add their debug SHA256 fingerprint (obtained via `keytool`) to the Branch dashboard later.
    *   **`keytool` Error:** The initial `keytool` command failed because it was not found in the system's PATH.
        *   **Resolution:** Provided instructions to navigate to the Java `bin` directory (e.g., `cd "C:\Program Files\Java\jdk-X.X.X\bin"`) and run the `keytool` command from there, or to add the Java `bin` directory to the system's PATH environment variable.
*   **iOS Bundle ID:** `com.ajilkojilgokulravi.unniman`
*   **App Store URL:** Placeholder, to be updated by the user.
*   **Apple Team ID/App Prefix:** User to configure in Branch dashboard.

### SDK Installation & Project Configuration:

*   **SDK Installation:** 
    * Initial version installed: `react-native-branch@^6.6.0`
    * Expo SDK: `~52.0.37`
*   **`branch.json` Creation:**
    *   A `branch.json` file was created in the project root with the live key and link domains:
        ```json
        {
          "branchKey": "key_live_lsvfoHjZGCGcuEseqCIYAompzweTIc13",
          "linkDomain": ["xbwk1.app.link", "xbwk1-alternate.app.link"]
        }
        ```
*   **`.gitignore` Update:** `branch.json` was added to `.gitignore` to prevent committing sensitive keys.
*   **`app.config.js` Plugin:** The `react-native-branch` plugin was initially added to `app.config.js`. This later proved to be a source of error (see Phase 6).

## Phase 3: Implement Branch SDK Deep Link Handling

The existing `services/DeepLinkHandler.ts` was modified to integrate Branch.

*   **Import Branch SDK:** `import branch from 'react-native-branch';` was added.
*   **`setupDeepLinkListeners()`:**
    *   `branch.subscribe()` was added to listen for Branch deep links.
    *   The subscription callback extracts `articleId` or `id` from Branch parameters (`params`).
    *   If an ID is found, it navigates to the `ArticleDetail` screen:
        `this.navigationRef.current.navigate('ArticleDetail', { id: articleId });`
    *   Error handling was included for cases where `params['+clicked_branch_link']` is false or an error occurs.
*   **`cleanupBranchListeners()`:**
    *   A new method was added to `DeepLinkHandler.ts` to store and call the unsubscribe function returned by `branch.subscribe()`.
*   **`App.tsx` Update:**
    *   `deepLinkHandler.cleanupBranchListeners()` was called in the `useEffect` cleanup phase of `App.tsx` to prevent memory leaks.

## Phase 4: Implement Branch Link Creation for Sharing

Functionality for creating and sharing Branch links was added to article detail and news card components.

### `screens/ArticleDetailScreen.tsx` (`handleShare` function):

1.  **Import `branch`:** `import branch from 'react-native-branch';`
2.  **Create `BranchUniversalObject`:**
    ```javascript
    const buo = await branch.createBranchUniversalObject(\`article/\${article.id}\`, {
      locallyIndex: true,
      title: article.title,
      contentDescription: article.summary,
      contentImageUrl: article.image_path, // Ensure this is a publicly accessible URL
      customMetadata: {
        articleId: article.id, // Ensure article.id is a string
        // Potentially add other relevant metadata
      },
    });
    ```
3.  **Define Link Properties:**
    ```javascript
    const linkProperties = {
      feature: 'share',
      channel: 'article', // Or a more general channel like 'app'
      campaign: 'article-sharing', // Example campaign
      customData: { // Data to be passed through the link
        article_id: article.id,
        '$fallback_url': \`https://edushorts.com/articles/\${article.id}\`, // Example fallback
        '$android_url': 'market://details?id=com.ajilkojilgokulravi.unniman',
        '$ios_url': 'itms-apps://itunes.apple.com/app/your-app-id', // Replace with actual App Store ID
      }
    };
    ```
4.  **Generate Short URL:** `const { url } = await buo.generateShortUrl(linkProperties, controlParams);` (Note: `controlParams` was not explicitly defined in the provided history but is part of the standard Branch SDK call).
5.  **Share URL:** `Share.share({ message: \`Check out this article: \${url}\`, url });`

### `components/NewsCard.tsx` (`handleShare` function):

*   The existing `handleShare` function, which previously used a `DynamicLinkService`, was refactored to use `react-native-branch` in a similar manner to `ArticleDetailScreen.tsx`.
*   It creates a `BranchUniversalObject` with article details and generates a Branch short URL for sharing.

## Phase 5: FCM Notification Deep Linking via Branch

This phase was intentionally skipped by user request and was planned to be addressed at a later time.

## Phase 6: Build Issues & Debugging

After implementing the above changes, attempts to build a production APK resulted in failures.

*   **Build Command:** `eas build -p android --profile production`

### Initial Build Errors:

1.  **Error 1:** `Package "react-native-branch" does not contain a valid config plugin.`
    *   **Context:** This error appeared during the EAS Build process.
2.  **Error 2:** `Unexpected token 'typeof'`
    *   **Context:** This error also appeared during the EAS Build process, typically indicating a JavaScript syntax issue or a transpilation problem.

### Troubleshooting Steps & Resolutions:

1.  **Isolating the Issue:**
    *   **Action:** Commented out the `react-native-branch` plugin in `app.config.js`.
    *   **Result:** Running `npx expo config --json` locally succeeded.
    *   **Conclusion:** This strongly indicated that the issue was related to the `react-native-branch` plugin configuration or compatibility.

2.  **Research & Version Alignment:**
    *   **Installed Versions:**
        *   `react-native-branch`: `^6.6.0`
        *   Expo SDK: `~52.0.37`
    *   **Findings from Research:**
        *   For Expo-managed applications, the config plugin to be used in `app.config.js` is `@config-plugins/react-native-branch`, not `react-native-branch` directly.
        *   Expo SDK 52 has specific compatibility requirements:
            *   `react-native-branch`: `6.4.0` (not 6.6.0 which we initially installed)
            *   `@config-plugins/react-native-branch`: `9.0.0`
        *   The "Unexpected token 'typeof'" error was suspected to be related to:
            *   Node.js version (potentially Node >= 22 causing issues with Flow types in older React Native versions or dependencies).
            *   Transpilation issues with Flow syntax present in some `react-native-branch` files if not correctly handled by the build pipeline.

3.  **Correcting `app.config.js`:**
    *   **Action:** Modified `app.config.js` to use `"@config-plugins/react-native-branch"` in the `plugins` array instead of `"react-native-branch"`.
        ```javascript
        // app.config.js
        export default ({ config }) => {
          return {
            ...config,
            plugins: [
              // ... other plugins
              "@config-plugins/react-native-branch", // Corrected plugin
            ],
          };
        };
        ```

4.  **Further Required Steps Based on Research:**
    *   Install the correct config plugin: `npm install @config-plugins/react-native-branch@9.0.0` or `yarn add @config-plugins/react-native-branch@9.0.0`.
    *   Downgrade `react-native-branch` to the compatible version: `npm install react-native-branch@6.4.0` or `yarn add react-native-branch@6.4.0`.
    *   Run `npx expo prebuild --clean` if issues persist after version changes to ensure native projects are regenerated correctly.

### Deeper Expo Configuration Understanding

Additional research revealed important insights about Expo's config plugin system:

1. **Config Plugin Purpose:** Config plugins are used by Expo Prebuild to transform native code templates. For third-party native modules in Expo-managed apps, separate config plugins (prefixed with `@config-plugins/`) are required rather than directly using the module name.

2. **Version-Specific Compatibility:** Expo prebuild runs transformations on source templates associated with specific Expo SDK versions. When Expo SDK upgrades to a new version of React Native, template changes can significantly impact plugin compatibility.

3. **Plugin Development Best Practices:**
   - Split plugins by platform (e.g., `withIosSplash`, `withAndroidSplash`)
   - Leverage built-in plugins when possible
   - Document manual setup instructions as fallback
   - Avoid modifying `sdkVersion` via config plugins

4. **Expo Prebuild Limitations:**
   - Only supports Android and iOS platforms
   - Requires all native changes to be added with native modules and config plugins
   - May not be suitable for quick experimentation with native code
   - Community plugins may not support all Expo SDK versions

### Other Potential Issues (Mentioned or Implied):

*   **App Not Opening:** While not explicitly detailed as a resolved error *after* Branch integration, ensuring correct URI schemes (`edushorts://`) in `AndroidManifest.xml` (via `app.config.js`), Branch dashboard, and deep link handling code is crucial to prevent the app from not opening or not handling links correctly. The pre-integration cleanup of schemes aimed to mitigate this.
*   **SHA256 Mismatch:** Ensuring all relevant SHA256 fingerprints (debug, release, Play Store signing) are added to the Branch dashboard is vital for Android deep linking to work correctly.
*   **iOS Configuration:** Correctly setting the Bundle ID, Team ID, and ensuring Associated Domains are configured in Xcode and the Apple Developer portal are critical for iOS Universal Links.

## Key Learnings & Takeaways

*   **Expo Plugin System:** For Expo managed workflows, always use the specific `@config-plugins/*` package for third-party native modules if available, rather than directly listing the base package in `app.config.js` plugins.
*   **Version Compatibility:** Pay close attention to version compatibility between Expo SDK, React Native, and third-party libraries like `react-native-branch`. Consult official documentation and community resources (e.g., GitHub issues) for known compatibility matrices.
*   **Thorough Cleanup:** Addressing inconsistencies and removing obsolete configurations before integrating new, complex features like deep linking can prevent confusing and hard-to-diagnose issues.
*   **Branch Dashboard Configuration:** Accurate configuration in the Branch.io dashboard (URI schemes, link domains, SHA256 fingerprints, Bundle IDs) is as critical as the in-app SDK implementation.
*   **Iterative Debugging:** When build errors occur, isolate the problematic module/configuration by commenting out recent changes and testing incrementally (e.g., using `npx expo config --json` for config validation).
*   **`prebuild --clean`:** When making significant changes to native configurations or package versions in an Expo project, running `npx expo prebuild --clean` can help ensure that the native `android` and `ios` directories are correctly regenerated.

## Appendix A: Credentials Used

*   **Branch.io Live Key:** `key_live_lsvfoHjZGCGcuEseqCIYAompzweTIc13`
    *   Used in: `branch.json` and configured in the Branch.io dashboard for production builds.

## Appendix B: Deep Linking URLs, Schemes, and Disparities

This section details the various URLs and URI schemes encountered or used during the integration process, highlighting any inconsistencies or obsolete configurations.

### URI Schemes:

*   **`edushort://`**
    *   **Initial Location:** `App.tsx` (linking configuration).
    *   **Issue:** Discrepancy with `app.config.js`.
    *   **Resolution:** Changed to `edushorts://` in `App.tsx` for consistency.
*   **`edushorts://`**
    *   **Used in:**
        *   `app.config.js` (as the primary scheme).
        *   Branch.io Dashboard (Android URI Scheme).
        *   Corrected scheme in `App.tsx`.
        *   `AndroidManifest.xml` (intent filter ` <data android:scheme="edushorts" android:host="article" android:pathPattern="/*"/>`).
    *   **Status:** Current primary URI scheme for the app.
*   **`com.ajilkojilgokulravi.unniman`**
    *   **Used in:**
        *   Android Package Name.
        *   Implicitly used as a scheme by Android if no other is specified.
        *   `AndroidManifest.xml` (intent filter `<data android:scheme="com.ajilkojilgokulravi.unniman"/>`).
*   **`exp+edushorts`**
    *   **Used in:** `AndroidManifest.xml` (intent filter `<data android:scheme="exp+edushorts"/>`).
    *   **Context:** This is a scheme automatically added by Expo for development builds.

### Web URLs & Associated Link Domains:

*   **`edushortlinks.netlify.app`**
    *   **Initial Locations:**
        *   `webUrl` constant in `screens/ArticleDetailScreen.tsx`.
        *   `linking.prefixes` in `App.tsx`.
        *   Android `intentFilter` in `app.config.js` and `AndroidManifest.xml` (`<data android:scheme="https" android:host="edushortlinks.netlify.app" android:pathPattern="/article/*"/>`).
    *   **Issue:** Part of an older dynamic linking setup, made obsolete by Branch.io integration.
    *   **Resolution:** Removed from `screens/ArticleDetailScreen.tsx`, `App.tsx`, and `app.config.js`. The entry in `AndroidManifest.xml` was effectively superseded by Branch configuration, though ideally, it would be explicitly removed if not serving any other purpose.
*   **Branch.io Link Domains:**
    *   `xbwk1.app.link` (Default)
    *   `xbwk1-alternate.app.link` (Alternate)
    *   **Used in:** `branch.json` and Branch.io dashboard configuration. These are the domains that will form the base of the generated Branch deep links.
*   **Fallback URL (Example):** `https://edushorts.com/articles/${article.id}`
    *   **Used in:** `linkProperties` when creating Branch links in `screens/ArticleDetailScreen.tsx` and `components/NewsCard.tsx`. This is where users are redirected if the app can't be opened for some reason (e.g., on desktop).
*   **Android Play Store URL:** `market://details?id=com.ajilkojilgokulravi.unniman`
    *   **Used in:** `linkProperties` (`$android_url`) for Branch links.
*   **iOS App Store URL (Placeholder):** `itms-apps://itunes.apple.com/app/your-app-id`
    *   **Used in:** `linkProperties` (`$ios_url`) for Branch links. Needs to be updated with the actual App Store ID.

### Disparities Summary:

*   The primary disparity was the `edushort://` vs `edushorts://` scheme mismatch between `App.tsx` and `app.config.js`, which was resolved.
*   The usage of `edushortlinks.netlify.app` represented an outdated approach to deep linking that was cleaned up and replaced by Branch.io functionalities.
*   Multiple schemes (`edushorts://`, `com.ajilkojilgokulravi.unniman`, `exp+edushorts`) were present in `AndroidManifest.xml`. While `edushorts://` is the primary for Branch, the others are standard for Android/Expo. 

## Appendix C: Summary of Implementation Challenges

### Build Errors & Resolutions

| Error | Context | Resolution |
|-------|---------|------------|
| `Package "react-native-branch" does not contain a valid config plugin` | EAS Build - Production | Used `@config-plugins/react-native-branch` instead of `react-native-branch` in app.config.js plugins array |
| `Unexpected token 'typeof'` | EAS Build - JS Transpilation | Identified as compatibility issue between react-native-branch 6.6.0 and Expo SDK 52; required downgrading to react-native-branch 6.4.0 |
| `keytool` command not found | SHA256 fingerprint generation | Navigated to Java bin directory or added it to PATH environment variable |
| App not opening from deep links | Post-integration testing | Ensured consistent URI scheme (`edushorts://`) across app.config.js, Branch dashboard, and link handling code |

### Deep Research Findings

1. **Version Compatibility Matrix:**
   - Expo SDK 52 works with:
     - react-native-branch: 6.4.0
     - @config-plugins/react-native-branch: 9.0.0

2. **Expo Config Plugin System:**
   - For third-party native modules in Expo-managed apps, separate config plugins (prefixed with `@config-plugins/`) are required
   - Plugin compatibility is highly dependent on specific Expo SDK versions
   - When Expo SDK upgrades to a new version of React Native, template changes can significantly impact plugin compatibility

3. **URI Scheme Handling:**
   - Multiple schemes can coexist in AndroidManifest.xml
   - Primary scheme for Branch (`edushorts://`) should be consistent across all configurations
   - Development builds automatically add `exp+[scheme]://` which needs to be handled differently

### Post-Build Testing Requirements

1. **Deep Link Testing:**
   - Test deep links from:
     - SMS/messaging apps
     - Email
     - Social media platforms
     - Browser
   - Verify both installed and not-installed scenarios

2. **Analytics Verification:**
   - Verify Branch dashboard reports link clicks
   - Check that attribution data is correctly tracked
   - Monitor install attribution if applicable

3. **Edge Cases:**
   - Test with various article IDs, including special characters
   - Verify behavior when article doesn't exist
   - Test on different Android and iOS versions
   - Verify behavior with slow network connections

### Outstanding Issues for Future Resolution

1. **FCM Notification Deep Linking:** Implementation deferred to a future phase
2. **iOS Universal Links:** Additional configuration required in Apple Developer portal
3. **App Store Fallback Links:** Need to update with actual App Store ID once published
4. **Branch Dashboard Metrics Integration:** Consider integrating with analytics platforms

This implementation process demonstrated the importance of thorough preparation, consistent configuration across multiple systems, and careful version management, especially when working with third-party dependencies in a managed Expo workflow.

This document serves as a living record and should be updated as the integration evolves, particularly when FCM notification deep linking is implemented or further issues are encountered and resolved. 