name: Release

on:
  workflow_dispatch:
    inputs:
      track:
        type: choice
        description: The Google Play track to release to
        required: true
        default: 'internal'
        options:
          - internal
          - beta
          - production
  push:
    branches:
      - new-main

jobs:
  distribute-to-firebase:
    name: Distribute to Firebase App Distribution
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      EAS_TOKEN: ${{ secrets.EAS_TOKEN }}
      FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Verify EAS Authentication
        run: |
          echo "Verifying EAS authentication..."
          eas whoami

      - name: Build APK for Firebase Distribution
        id: build
        run: |
          echo "Starting EAS build for Android APK..."
          build_output=$(eas build --platform android --profile preview --non-interactive --json)
          echo "Build output: $build_output"
          
          # Check if build_output contains valid JSON
          if echo "$build_output" | jq empty 2>/dev/null; then
            apk_url=$(echo "$build_output" | jq -r '.[] | .artifacts.buildUrl // empty')
            if [ -z "$apk_url" ] || [ "$apk_url" = "null" ]; then
              echo "Error: Could not extract APK URL from build output"
              echo "Build output: $build_output"
              exit 1
            fi
            echo "APK URL: $apk_url"
            echo "apk_url=$apk_url" >> $GITHUB_OUTPUT
          else
            echo "Error: Build output is not valid JSON"
            echo "Output: $build_output"
            exit 1
          fi

      - name: Download APK
        run: |
          apk_url="${{ steps.build.outputs.apk_url }}"
          echo "APK URL to download: $apk_url"
          
          if [ -z "$apk_url" ] || [ "$apk_url" = "null" ]; then
            echo "Error: APK URL is empty or null"
            exit 1
          fi
          
          # Validate URL format
          if [[ ! "$apk_url" =~ ^https?:// ]]; then
            echo "Error: Invalid URL format: $apk_url"
            exit 1
          fi
          
          echo "Downloading APK from: $apk_url"
          curl -L -o app.apk "$apk_url"
          
          # Verify download
          if [ ! -f app.apk ] || [ ! -s app.apk ]; then
            echo "Error: APK download failed or file is empty"
            exit 1
          fi
          
          echo "APK downloaded successfully. Size: $(ls -lh app.apk | awk '{print $5}')"

      - name: Distribute to Firebase
        run: |
          firebase appdistribution:distribute ./app.apk \
            --app "$FIREBASE_APP_ID" \
            --token "$FIREBASE_TOKEN" \
            --groups "internal-qa-team"
        
  submit-to-google-play:
    name: Submit to Google Play Store
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      EAS_TOKEN: ${{ secrets.EAS_TOKEN }}
      GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Verify EAS Authentication
        run: |
          echo "Verifying EAS authentication..."
          eas whoami

      - name: Decode and write Google Service Account Key
        run: |
          echo "Decoding Google Service Account Key..."
          echo "$GOOGLE_SERVICE_ACCOUNT_JSON" | base64 -d > ./google-service-account.json
          
          # Verify JSON is valid
          if ! jq empty ./google-service-account.json 2>/dev/null; then
            echo "Error: Invalid Google Service Account JSON"
            exit 1
          fi
          
          echo "Google Service Account Key decoded successfully"

      - name: Build AAB for Google Play
        id: build
        run: |
          echo "Starting EAS build for Android AAB..."
          build_output=$(eas build --platform android --profile production --non-interactive --json)
          echo "Build output: $build_output"
          
          # Check if build_output contains valid JSON
          if echo "$build_output" | jq empty 2>/dev/null; then
            build_url=$(echo "$build_output" | jq -r '.[] | .buildUrl // empty')
            if [ -z "$build_url" ] || [ "$build_url" = "null" ]; then
              echo "Error: Could not extract build URL from build output"
              echo "Build output: $build_output"
              exit 1
            fi
            echo "Build URL: $build_url"
            echo "build_url=$build_url" >> $GITHUB_OUTPUT
          else
            echo "Error: Build output is not valid JSON"
            echo "Output: $build_output"
            exit 1
          fi

      - name: Submit to Google Play Store
        run: |
          build_url="${{ steps.build.outputs.build_url }}"
          track="${{ github.event.inputs.track }}"
          
          echo "Build URL: $build_url"
          echo "Target track: $track"
          
          if [ -z "$build_url" ] || [ "$build_url" = "null" ]; then
            echo "Error: Build URL is empty or null"
            exit 1
          fi
          
          echo "Submitting to Google Play Store..."
          eas submit --platform android \
            --url "$build_url" \
            --track "$track" \
            --non-interactive 