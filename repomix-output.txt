This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
adminpanelplan.md
app.json
App.tsx
backend-plan.md
components/CategorySelector.tsx
components/EmptyState.tsx
components/NewsCard.tsx
data/mockData.ts
index.ts
learning.md
memory.md
newfile
package.json
screens/AdminDashboardScreen.tsx
screens/ArticleDetailScreen.tsx
screens/BookmarksScreen.tsx
screens/DiscoverScreen.tsx
screens/HomeScreen.tsx
screens/LoginScreen.tsx
screens/NotificationsScreen.tsx
screens/ProfileScreen.tsx
tsconfig.json
types/accessibility.ts

================================================================
Files
================================================================

================
File: .gitignore
================
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

================
File: adminpanelplan.md
================
Phase 1: News Management System
Objective: Connect existing admin UI to Supabase without altering current component structure

1.1 Modify AdminDashboardScreen.tsx
typescript
Copy
// Add to existing code
const fetchArticles = async () => {
  const { data, error } = await supabase
    .from('articles')
    .select(`*, categories(name)`)
    .order('created_at', { ascending: false });
  setArticles(data || []);
};

// Update deleteArticle function
const deleteArticle = async (id: string) => {
  const { error } = await supabase
    .from('articles')
    .delete()
    .eq('id', id);
  if (!error) toast.success('Article deleted');
};
1.2 Create News Editor Component
New file: screens/ArticleEditorScreen.tsx

typescript
Copy
// Reuse existing NewsCard props and styling
const handleSubmit = async () => {
  if (editMode) {
    await supabase
      .from('articles')
      .update({ ...formData })
      .eq('id', articleId);
  } else {
    await supabase
      .from('articles')
      .insert({ ...formData, created_by: user.id });
  }
  navigation.goBack();
};
Phase 2: User Management System
Objective: Add real user management to existing placeholder

2.1 Update AdminDashboardScreen.tsx
typescript
Copy
// Add user tab content
const renderUsersTab = () => {
  const { data: users } = await supabase
    .from('users')
    .select('id, email, created_at, is_admin, is_active');

  return (
    <FlatList
      data={users}
      renderItem={({ item }) => (
        <View style={existingStyles.articleItem}>
          <Text>{item.email}</Text>
          <Switch
            value={item.is_active}
            onValueChange={(val) => updateUserStatus(item.id, val)}
          />
        </View>
      )}
    />
  );
};

const updateUserStatus = async (userId: string, isActive: boolean) => {
  await supabase
    .from('users')
    .update({ is_active: isActive })
    .eq('id', userId);
};
Phase 3: Notification Management
Objective: Add notification system using existing UI patterns

3.1 Create NotificationComposer.tsx
New file: components/NotificationComposer.tsx

typescript
Copy
// Match existing admin panel styling
const sendNotification = async () => {
  await supabase
    .from('notifications')
    .insert({
      title,
      body,
      target_type: selectedTarget,
      scheduled_at: scheduleDate
    });
};
3.2 Add to AdminDashboardScreen.tsx
typescript
Copy
// Add notification tab
const renderNotificationsTab = () => (
  <View style={styles.tabContent}>
    <NotificationComposer />
    <FlatList
      data={notifications}
      renderItem={({ item }) => (
        <View style={existingStyles.articleItem}>
          <Text>{item.title}</Text>
          <Text>{item.scheduled_at}</Text>
        </View>
      )}
    />
  </View>
);
Integration Strategy
Reuse Existing Patterns

Keep using existing FlatList structures from articles UI

Maintain current styling in styles object from AdminDashboardScreen

Preserve tab navigation flow (analytics | articles | users | notifications)

Supabase RLS Policies

sql
Copy
-- For users table
CREATE POLICY "Admins manage users" ON users 
FOR ALL USING (auth.jwt() ->> 'is_admin' = 'true');

-- For notifications
CREATE POLICY "Admin-only notifications" ON notifications 
FOR ALL USING (auth.jwt() ->> 'is_admin' = 'true');
Backward Compatibility

Keep mock data fallback during development

Use conditional rendering for admin features:

typescript
Copy
{user?.is_admin && <AdminTabNavigator />}
File Impact Analysis
File	Changes	Risk
screens/AdminDashboardScreen.tsx	Add real data fetching	Low
lib/supabaseClient.ts	None (existing config)	None
navigation/App.tsx	No routing changes	None
package.json	Already has Supabase dep	None

================
File: app.json
================
{
  "expo": {
    "name": "a0-project",
    "slug": "snack-b817e063-ef80-42d1-95bc-110e75455794",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/splash-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "favicon": "./assets/favicon.png"
    },
    "description": "Quickly generate React Native components with AI"
  }
}

================
File: App.tsx
================
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { StyleSheet, Text, View } from 'react-native';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { enableScreens } from 'react-native-screens';
import { Toaster } from 'sonner-native';

import HomeScreen, { RootStackParamList } from './screens/HomeScreen';
import DiscoverScreen from './screens/DiscoverScreen';
import ArticleDetailScreen from './screens/ArticleDetailScreen';
import BookmarksScreen from './screens/BookmarksScreen';
import ProfileScreen from './screens/ProfileScreen';
import LoginScreen from './screens/LoginScreen';
import AdminDashboardScreen from './screens/AdminDashboardScreen';
import NotificationsScreen from './screens/NotificationsScreen';

enableScreens();

const Tab = createBottomTabNavigator<RootStackParamList>();
const Stack = createNativeStackNavigator<RootStackParamList>();

const TabNavigator = () => (
  <Tab.Navigator
    screenOptions={{
      headerShown: false,
      tabBarStyle: { borderTopWidth: 1, borderTopColor: '#eeeeee' },
      tabBarActiveTintColor: '#0066cc',
      tabBarInactiveTintColor: '#888888',
    }}
  >
    <Tab.Screen 
      name="Home" 
      component={HomeScreen}
      options={{
        tabBarIcon: ({ focused, color, size }) => (
          <Ionicons name={focused ? 'home' : 'home-outline'} size={size} color={color} />
        ),
        tabBarLabel: ({ color }) => (
          <View>
            <Text style={{ color, fontSize: 12 }}>Home</Text>
          </View>
        ),
      }}
    />
    <Tab.Screen 
      name="Discover" 
      component={DiscoverScreen}
      options={{
        tabBarIcon: ({ focused, color, size }) => (
          <Ionicons name={focused ? 'compass' : 'compass-outline'} size={size} color={color} />
        ),
        tabBarLabel: ({ color }) => (
          <View>
            <Text style={{ color, fontSize: 12 }}>Discover</Text>
          </View>
        ),
      }}
    />
    <Tab.Screen 
      name="Bookmarks" 
      component={BookmarksScreen}
      options={{
        tabBarIcon: ({ focused, color, size }) => (
          <Ionicons name={focused ? 'bookmark' : 'bookmark-outline'} size={size} color={color} />
        ),
        tabBarLabel: ({ color }) => (
          <View>
            <Text style={{ color, fontSize: 12 }}>Saved</Text>
          </View>
        ),
      }}
    />
    <Tab.Screen 
      name="Profile" 
      component={ProfileScreen}
      options={{
        tabBarIcon: ({ focused, color, size }) => (
          <Ionicons name={focused ? 'person' : 'person-outline'} size={size} color={color} />
        ),
        tabBarLabel: ({ color }) => (
          <View>
            <Text style={{ color, fontSize: 12 }}>Profile</Text>
          </View>
        ),
      }}
    />
  </Tab.Navigator>
);

const App = () => (
  <GestureHandlerRootView style={styles.container}>
    <SafeAreaProvider>
      <Toaster />
      <NavigationContainer>
        <Stack.Navigator screenOptions={{ headerShown: false }}>
          <Stack.Screen name="Login" component={LoginScreen} />
          <Stack.Screen name="Register" component={LoginScreen} />
          <Stack.Screen name="Main" component={TabNavigator} />
          <Stack.Screen name="ArticleDetail" component={ArticleDetailScreen} />
          <Stack.Screen name="Notifications" component={NotificationsScreen} />
          <Stack.Screen name="AdminDashboard" component={AdminDashboardScreen} />
        </Stack.Navigator>
      </NavigationContainer>
    </SafeAreaProvider>
  </GestureHandlerRootView>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

export default App;

================
File: backend-plan.md
================
Phase 1: Supabase Project Setup & Authentication
Objective: Replace mock authentication with Supabase Auth while preserving existing UI/UX.

1.1 Database Schema
File to create: supabase/migrations/0001_initial_schema.sql

sql
Copy
-- Users Table (Matches PRD)
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  full_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  last_login TIMESTAMPTZ,
  is_admin BOOLEAN DEFAULT FALSE,
  is_active BOOLEAN DEFAULT TRUE
);

-- Add RLS Policy (Allow users to read their own data)
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own data" 
ON users FOR ALL USING (auth.uid() = id);
1.2 Supabase Client Configuration
File to create: lib/supabaseClient.ts

typescript
Copy
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = process.env.EXPO_PUBLIC_SUPABASE_URL!;
const SUPABASE_KEY = process.env.EXPO_PUBLIC_SUPABASE_KEY!;

export const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
1.3 Auth Integration
File to modify: screens/LoginScreen.tsx

typescript
Copy
// Replace mock login with:
const handleLogin = async () => {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (data.user?.id) {
    navigation.navigate('Home');
  }
};
RLS Policies:

Enable RLS on users table with policies for admins (use Supabase Dashboard).

Phase 2: News & Category Management
Objective: Migrate mock news data to Supabase while retaining existing UI components.

2.1 Database Schema
Add to migration file:

sql
Copy
-- Categories Table
CREATE TABLE categories (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT UNIQUE NOT NULL
);

-- Articles Table
CREATE TABLE articles (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  summary TEXT NOT NULL,
  content TEXT NOT NULL,
  source_url TEXT NOT NULL,
  source_name TEXT NOT NULL,
  image_url TEXT,
  category_id UUID REFERENCES categories(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  created_by UUID REFERENCES users(id)
);

-- RLS Policies (Admins can edit, users can read)
CREATE POLICY "Admins manage articles" ON articles 
FOR ALL USING (auth.jwt() ->> 'is_admin' = 'true');

CREATE POLICY "Public read access" ON articles 
FOR SELECT USING (true);
2.2 News Fetching
File to modify: screens/HomeScreen.tsx

typescript
Copy
// Replace mock data with:
const fetchNews = async () => {
  const { data, error } = await supabase
    .from('articles')
    .select('*')
    .order('created_at', { ascending: false });
  setNews(data || []);
};
2.3 Admin Panel Integration
File to modify: screens/AdminDashboardScreen.tsx

typescript
Copy
// For deleting articles:
const deleteArticle = async (id: string) => {
  const { error } = await supabase
    .from('articles')
    .delete()
    .eq('id', id);
};
Phase 3: User Preferences & Saved Articles
Objective: Implement saved articles and preferences using Supabase relationships.

3.1 Database Schema
Add to migration file:

sql
Copy
-- Saved Articles Table
CREATE TABLE saved_articles (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  article_id UUID REFERENCES articles(id) ON DELETE CASCADE,
  saved_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (user_id, article_id)
);

-- User Preferences Table
CREATE TABLE user_preferences (
  user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
  notifications_enabled BOOLEAN DEFAULT TRUE,
  dark_mode_enabled BOOLEAN DEFAULT FALSE
);
3.2 Saved Articles Logic
File to modify: screens/BookmarksScreen.tsx

typescript
Copy
// Fetch saved articles:
const fetchSaved = async () => {
  const { data } = await supabase
    .from('saved_articles')
    .select('article_id')
    .eq('user_id', userId);
};
Phase 4: Notifications System
Objective: Add push notifications with Supabase edge functions.

4.1 Database Schema
Add to migration file:

sql
Copy
-- Notifications Table
CREATE TABLE notifications (
  id UUID PRIMARY KEY,
  title TEXT NOT NULL,
  body TEXT NOT NULL,
  target_audience JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
4.2 Notification Service
File to create: supabase/functions/send-notification/index.ts

typescript
Copy
// Use Supabase Edge Functions to trigger notifications
// Integrate with Expo Notifications SDK
Phase 5: Metrics & RLS Finalization
Objective: Secure all tables and implement admin metrics.

5.1 RLS Policies
saved_articles: auth.uid() = user_id

notifications: Admins-only access

5.2 Admin Dashboard Metrics
File to modify: screens/AdminDashboardScreen.tsx

typescript
Copy
// Total users:
const { count } = await supabase
  .from('users')
  .select('*', { count: 'exact' });
Key Integration Notes
Environment Variables: Add .env file with Supabase credentials.

Dependencies: Ensure @supabase/supabase-js is installed (already in package.json).

No Routing Changes: All existing routes (screens/HomeScreen, screens/AdminDashboardScreen, etc.) remain untouched.

Backward Compatibility: Mock data in data/mockData.ts can be phased out gradually.

================
File: components/CategorySelector.tsx
================
import React, { memo } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import { AccessibilityProps } from '../types/accessibility';

const categories = [
  { id: '1', name: 'All' },
  { id: '2', name: 'Education' },
  { id: '3', name: 'Scholarships' },
  { id: '4', name: 'Visas' },
  { id: '5', name: 'Immigration' },
  { id: '6', name: 'Study Abroad' },
  { id: '7', name: 'Research' },
];

interface CategorySelectorProps {
  selectedCategory: string;
  onSelectCategory: (category: string) => void;
}

const CategorySelector = ({ selectedCategory, onSelectCategory }: CategorySelectorProps) => {
  return (
    <ScrollView 
      horizontal 
      showsHorizontalScrollIndicator={false}
      contentContainerStyle={styles.container}
    >
      {categories.map((category) => (
        <TouchableOpacity
          key={category.id}
          style={[
            styles.categoryItem,
            selectedCategory === category.name && styles.selectedCategory,
          ]}
          onPress={() => onSelectCategory(category.name)}
          accessible={true}
          accessibilityLabel={`Category: ${category.name}`}
          accessibilityHint={`Click to filter articles in ${category.name} category`}
          accessibilityState={{ selected: selectedCategory === category.name }}
        >
          <Text 
            style={[
              styles.categoryText,
              selectedCategory === category.name && styles.selectedCategoryText,
            ]}
          >
            {category.name}
          </Text>
        </TouchableOpacity>
      ))}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    paddingVertical: 8,
  },
  categoryItem: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginRight: 8,
    borderRadius: 20,
    backgroundColor: '#f0f0f0',
  },
  selectedCategory: {
    backgroundColor: '#0066cc',
  },
  categoryText: {
    fontSize: 14,
    color: '#666',
  },
  selectedCategoryText: {
    color: 'white',
    fontWeight: 'bold',
  },
});

const areEqual = (prevProps: CategorySelectorProps, nextProps: CategorySelectorProps) => {
  return (
    prevProps.selectedCategory === nextProps.selectedCategory
  );
};

export default memo(CategorySelector, areEqual);

================
File: components/EmptyState.tsx
================
import React, { memo } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { Feather } from '@expo/vector-icons';

interface EmptyStateProps {
  icon: keyof typeof Feather.glyphMap;
  title: string;
  subtitle: string;
}

const EmptyState: React.FC<EmptyStateProps> = memo(({ icon, title, subtitle }) => {
  if (!icon || !title) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Feather name={icon} size={64} color="#666" />
      <Text style={styles.title}>{title}</Text>
      <Text style={styles.subtitle}>{subtitle}</Text>
    </View>
  );
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 16,
  },
  subtitle: {
    fontSize: 14,
    color: '#666',
    marginTop: 8,
    textAlign: 'center',
  },
});

export default EmptyState;

================
File: components/NewsCard.tsx
================
import React, { memo } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TouchableOpacity,
  Linking,
} from 'react-native';
import { AccessibilityProps } from '../types/accessibility';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';

import { RootStackParamList } from '../screens/HomeScreen';

interface Article {
  id: string;
  title: string;
  summary: string;
  category: string;
  source: string;
  timeAgo: string;
  imageUrl: string;
  sourceIconUrl: string;
  url: string;
}

interface NewsCardProps {
  article: Article;
}

const NewsCard = ({ article }: NewsCardProps) => {
  const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();

  // Ensure all required properties exist before rendering
  if (!article || !article.id || !article.title || !article.summary || 
      !article.category || !article.source || !article.timeAgo || 
      !article.imageUrl || !article.sourceIconUrl) {
    return null;
  }

  return (
    <TouchableOpacity 
      style={styles.card}
      onPress={() => navigation.navigate('ArticleDetail', { articleId: article.id })}
      accessible={true}
      accessibilityLabel={`Article: ${article.title}`}
      accessibilityHint="Click to read the full article"
    >
      <Image 
        source={{ uri: article.imageUrl }} 
        style={styles.image} 
      />
      <View style={styles.contentContainer}>
        <View style={styles.categoryRow}>
          <View style={styles.categoryBadge}>
            <Text style={styles.categoryText}>{article.category}</Text>
          </View>
          <Text style={styles.timeAgo}>{article.timeAgo}</Text>
        </View>
        <Text style={styles.title} numberOfLines={2}>{article.title}</Text>
        <Text style={styles.summary} numberOfLines={2}>{article.summary}</Text>
        <View>
          <View style={styles.sourceRow}>
            <Image source={{ uri: article.sourceIconUrl }} style={styles.sourceIcon} />
            <Text style={styles.sourceName}>{article.source}</Text>
          </View>
          <TouchableOpacity
            style={styles.readMoreButton}
            onPress={() => article.url && Linking.openURL(article.url)}
            accessible={true}
            accessibilityLabel="Read full article"
            accessibilityHint="Opens article in your browser"
          >
            <Text style={styles.readMoreText}>Read More</Text>
          </TouchableOpacity>
        </View>
      </View>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  card: {
    backgroundColor: 'white',
    borderRadius: 12,
    marginBottom: 16,
    overflow: 'hidden',
    flexDirection: 'row',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  image: {
    width: 100,
    height: '100%',
  },
  contentContainer: {
    flex: 1,
    padding: 12,
    justifyContent: 'space-between',
  },
  categoryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 6,
  },
  categoryBadge: {
    backgroundColor: '#0066cc',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 4,
  },
  categoryText: {
    color: 'white',
    fontSize: 10,
    fontWeight: 'bold',
  },
  timeAgo: {
    fontSize: 10,
    color: '#888',
  },
  title: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 4,
    color: '#333',
  },
  summary: {
    fontSize: 12,
    color: '#666',
    marginBottom: 6,
  },
  sourceRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  sourceIcon: {
    width: 16,
    height: 16,
    borderRadius: 8,
    marginRight: 6,
  },
  sourceName: {
    fontSize: 10,
    color: '#888',
    fontWeight: '500',
  },
  readMoreButton: {
    backgroundColor: '#0066cc',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 4,
    marginTop: 8,
    alignSelf: 'flex-start',
  },
  readMoreText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
});

const areEqual = (prevProps: NewsCardProps, nextProps: NewsCardProps) => {
  return (
    prevProps.article.id === nextProps.article.id &&
    prevProps.article.title === nextProps.article.title &&
    prevProps.article.summary === nextProps.article.summary &&
    prevProps.article.category === nextProps.article.category &&
    prevProps.article.source === nextProps.article.source &&
    prevProps.article.timeAgo === nextProps.article.timeAgo &&
    prevProps.article.imageUrl === nextProps.article.imageUrl &&
    prevProps.article.sourceIconUrl === nextProps.article.sourceIconUrl &&
    prevProps.article.url === nextProps.article.url
  );
};

export default memo(NewsCard, areEqual);

================
File: data/mockData.ts
================
// Mock data for the news app
export const mockNewsData = [
  {
    id: '1',
    title: 'New Scholarship Program for International Students Announced',
    summary: 'The Global Education Foundation has announced a new scholarship program offering full tuition coverage for international students pursuing STEM degrees.',
    content: 'The Global Education Foundation has announced a new scholarship program that will provide full tuition coverage for international students pursuing degrees in Science, Technology, Engineering, and Mathematics (STEM) fields. The program aims to support talented students from developing countries who demonstrate exceptional academic achievement and leadership potential. Applications open next month, with scholarships available for the upcoming academic year.',
    category: 'Scholarships',
    source: 'Education Daily',
    sourceIconUrl: 'https://api.a0.dev/assets/image?text=ED%20logo&aspect=1:1&seed=123',
    imageUrl: 'https://api.a0.dev/assets/image?text=students%20receiving%20scholarships&aspect=4:3&seed=1',
    timeAgo: '2 hours ago',
    url: 'https://example.com/scholarship-program',
    timestamp: '2025-03-01T10:30:00Z',
  },
  {
    id: '2',
    title: 'UK Announces New Post-Study Work Visa Extensions',
    summary: 'International graduates from UK universities will now have extended periods to find work after completing their studies, in a major immigration policy update.',    content: 'The UK government has announced significant changes to its post-study work visa program, extending the period international students can remain in the country after graduation. Under the new rules, graduates with bachelor\'s and master\'s degrees can stay for three years, up from the previous two years, while PhD graduates can remain for five years. This policy change aims to attract and retain global talent, particularly in high-demand sectors like technology and healthcare.',
    category: 'Visas',
    source: 'Global Immigration News',
    sourceIconUrl: 'https://api.a0.dev/assets/image?text=GIN%20logo&aspect=1:1&seed=456',
    imageUrl: 'https://api.a0.dev/assets/image?text=UK%20passport%20control&aspect=4:3&seed=2',
    timeAgo: '5 hours ago',
    url: 'https://example.com/uk-visa-extension',
    timestamp: '2025-03-02T08:15:00Z',
  },
  {
    id: '3',
    title: 'Canadian Universities Report Record International Enrollment',
    summary: 'Universities across Canada are experiencing unprecedented growth in international student applications, with enrollment numbers reaching all-time highs.',    content: 'Universities across Canada are reporting record-breaking international student enrollment numbers for the upcoming academic year. According to the Canadian Bureau for International Education, applications from overseas students have increased by 25% compared to last year, with particularly strong growth from countries in South Asia and Africa. Experts attribute this surge to Canada\'s reputation for high-quality education, relatively affordable tuition compared to other English-speaking countries, and straightforward pathways to permanent residency after graduation.',
    category: 'Education',
    source: 'Canada Education Review',
    sourceIconUrl: 'https://api.a0.dev/assets/image?text=CER%20logo&aspect=1:1&seed=789',
    imageUrl: 'https://api.a0.dev/assets/image?text=diverse%20students%20on%20canadian%20campus&aspect=4:3&seed=3',
    timeAgo: '1 day ago',
    url: 'https://example.com/canada-enrollment',
    timestamp: '2025-03-02T15:45:00Z',
  },
  {
    id: '4',
    title: 'New AI Tool Helps International Students Find Suitable Universities',
    summary: 'A newly launched artificial intelligence platform matches students with universities based on academic profile, budget, and career goals.',    content: 'A groundbreaking artificial intelligence platform called EduMatch has been launched to help international students find their ideal universities. The tool analyzes a student\'s academic profile, budget constraints, career aspirations, and personal preferences to generate personalized university recommendations. Early tests show that EduMatch has a 85% satisfaction rate among users, with many reporting that the platform suggested institutions they hadn\'t previously considered but that proved to be excellent matches for their needs and goals.',
    category: 'Education',
    source: 'Tech in Education',
    sourceIconUrl: 'https://api.a0.dev/assets/image?text=TIE%20logo&aspect=1:1&seed=101',
    imageUrl: 'https://api.a0.dev/assets/image?text=student%20using%20laptop%20to%20research%20universities&aspect=4:3&seed=4',
    timeAgo: '2 days ago',
    url: 'https://example.com/ai-university-matching',
    timestamp: '2025-03-01T09:20:00Z',
  },
  {
    id: '5',
    title: 'Australia Simplifies Student Visa Application Process',
    summary: 'The Australian government has streamlined its student visa process, reducing processing times and documentation requirements for applicants from select countries.',    content: 'The Australian Department of Home Affairs has announced significant changes to simplify the student visa application process. The reforms include shorter processing times, reduced documentation requirements for applicants from certain countries, and a more streamlined online application system. Additionally, the government has expanded the Simplified Student Visa Framework to include more countries, making it easier for students from these regions to study in Australia. Education experts predict these changes will boost Australia\'s competitiveness in the international education market.',
    category: 'Visas',
    source: 'Australian Education Herald',
    sourceIconUrl: 'https://api.a0.dev/assets/image?text=AEH%20logo&aspect=1:1&seed=202',
    imageUrl: 'https://api.a0.dev/assets/image?text=australian%20university%20campus&aspect=4:3&seed=5',
    timeAgo: '3 days ago',
    url: 'https://example.com/australia-visa-process',
    timestamp: '2025-02-28T11:10:00Z',
  },
];

export const mockUsers = [
  {
    id: '1',
    name: 'John Doe',
    email: 'john.doe@example.com',
    password: 'password123', // In a real app, this would be hashed
    role: 'user',
    preferences: {
      categories: ['Education', 'Scholarships'],
      sources: ['Education Daily', 'Global Immigration News'],
    },
    savedArticles: ['1', '3'],
    readingHistory: ['2', '4', '5'],
  },
  {
    id: '2',
    name: 'Admin User',
    email: 'admin@globaledu.com',
    password: 'admin123', // In a real app, this would be hashed
    role: 'admin',
    preferences: {
      categories: ['All'],
      sources: ['All'],
    },
    savedArticles: [],
    readingHistory: [],
  },
];

================
File: index.ts
================
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);

================
File: learning.md
================
# Project Structure and Implementation Patterns

## Project Overview
- React Native TypeScript project
- Uses React Navigation for routing
- Mock data pattern for development
- Component-based architecture with separation of concerns

## Key Components
- **NewsCard**: Reusable card component for displaying news articles
- **CategorySelector**: Handles news category filtering
- **ArticleDetailScreen**: Detailed view of articles
- **ProfileScreen**: User profile and settings management

## Data Flow
1. Mock data is stored in `data/mockData.ts`
2. Data is passed down through props with proper TypeScript interfaces
3. Components are typed with proper interfaces for props and navigation

## Implementation Patterns

### Navigation
- Uses React Navigation's stack navigator
- Routes are defined in RootStackParamList types
- Navigation prop typing ensures type-safe navigation calls
```typescript
type RootStackParamList = {
  ArticleDetail: { articleId: string };
  // other routes...
};
```

### TypeScript Integration
- Interfaces defined for all data structures
- Navigation props properly typed
- Component props defined with interfaces
```typescript
interface NewsCardProps {
  article: Article;
}
```

### External Link Handling
- Uses React Native's Linking API
- Always check if URL exists before attempting to open
```typescript
onPress={() => article.url && Linking.openURL(article.url)}
```

## Debugging Approaches

### TypeScript Errors
1. **Missing Properties**
   - Check interface definitions
   - Ensure mock data includes all required properties
   - Verify prop passing in parent components

2. **Navigation Type Errors**
   - Ensure proper typing of navigation prop
   - Check RootStackParamList includes all routes
   - Verify navigation parameters match defined types

3. **Component Prop Errors**
   - Define proper interfaces for props
   - Use optional properties when appropriate
   - Implement null checks for optional data

### Common Patterns for Fixes
1. **Type Definition**
```typescript
interface Article {
  id: string;
  title: string;
  // ... other required properties
  url?: string; // Optional properties with ?
}
```

2. **Null Checking**
```typescript
if (!article || !article.id) {
  return null;
}
```

3. **Type Assertion (when necessary)**
```typescript
const foundArticle = mockNewsData.find(item => item.id === articleId) as Article;
```

## Best Practices

### Component Structure
1. Define interfaces at the top
2. Initialize hooks and state
3. Define handler functions
4. Return JSX with proper type checking

### State Management
- Use typed useState hooks
- Initialize with proper types
- Handle loading and error states

### Style Organization
- StyleSheet.create for type-safe styles
- Group related styles together
- Use consistent naming conventions

### Error Handling
1. Validate data before rendering
2. Provide fallback UI for missing data
3. Use proper type guards
4. Handle async operations safely

## Future Improvements
1. Implement proper API integration
2. Add error boundaries
3. Implement proper state management (e.g., Redux)
4. Add unit tests
5. Implement proper loading states

## Common Issues and Solutions

### Issue: Component Not Rendering
- Check if all required props are passed
- Verify data structure matches interface
- Ensure proper null checking

### Issue: Navigation Errors
- Verify route names match RootStackParamList
- Check parameter types match route definitions
- Ensure navigation prop is properly typed

### Issue: TypeScript Errors
- Check interface definitions
- Verify data shapes match interfaces
- Use optional properties when appropriate
- Implement proper type guards

## New Learnings (March 5, 2025)

### React Native Performance Optimization
1. **FlatList Optimization Techniques**
   ```typescript
   <FlatList
     windowSize={5}
     maxToRenderPerBatch={5}
     updateCellsBatchingPeriod={50}
     removeClippedSubviews={true}
     initialNumToRender={10}
   />
   ```
   - windowSize controls render window size
   - maxToRenderPerBatch limits batch processing
   - removeClippedSubviews helps with memory usage
   - initialNumToRender optimizes initial load

2. **React.memo Usage**
   ```typescript
   const areEqual = (prevProps: Props, nextProps: Props) => {
     // Compare only necessary props
     return prevProps.id === nextProps.id;
   };
   export default memo(Component, areEqual);
   ```
   - Prevents unnecessary re-renders
   - Custom comparison function for fine control
   - Important for list item components

### Platform-Specific Development
1. **RefreshControl Differences**
   ```typescript
   Platform.select({
     ios: <RefreshControl tintColor="#0066cc" />,
     android: <RefreshControl colors={['#0066cc']} />
   })
   ```
   - Different props for iOS and Android
   - Use Platform.select for clean conditionals
   - Test both platforms for consistency

### Navigation Best Practices
1. **Type-Safe Navigation**
   ```typescript
   type RootStackParamList = {
     Screen: undefined | { param: string };
   };
   const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();
   ```
   - Define types for all routes and params
   - Use proper navigation typing
   - Handle undefined routes properly

### Component Architecture
1. **Toast Notifications**
   ```typescript
   import { Toaster, toast } from 'sonner-native';
   // Provider at app root
   <Toaster />
   // Usage in components
   toast.success('Operation successful');
   ```
   - Global toast provider setup
   - Consistent error/success messaging
   - Non-blocking user feedback

2. **Key Management in Lists**
   - Avoid using index as key
   - Ensure unique key generation for dynamic lists
   - Handle key collisions in load more scenarios

### Error Prevention
1. **TypeScript Guards**
   ```typescript
   if (!item || !item.id) {
     return null;
   }
   ```
   - Always check for undefined/null
   - Use early returns for invalid data
   - Implement proper error boundaries

2. **Performance Monitoring**
   - Watch for VirtualizedList warnings
   - Monitor render performance
   - Implement proper loading states

### Development Workflow
1. **Git Commit Organization**
   - Use semantic commit messages
   - Group related changes
   - Document breaking changes

2. **Code Documentation**
   - Document complex logic
   - Add TypeScript interfaces
   - Comment performance optimizations

================
File: memory.md
================
# Project Task History

## Authentication Flow and UI Optimization Implementation (March 5, 2025)

### Tasks Completed

1. **Authentication Flow**
   - Created new LoginScreen component
   - Added toast notifications using sonner-native
   - Implemented navigation between Login and Main screens
   - Added Register screen placeholder

2. **Navigation Stack Updates**
   - Modified App.tsx to include proper navigation stack
   - Added types for new screens in RootStackParamList
   - Fixed navigation flow from Profile to Login

3. **Performance Optimizations**
   - Implemented React.memo for NewsCard component
   - Added FlatList optimizations:
     - windowSize, maxToRenderPerBatch configurations
     - removeClippedSubviews implementation
     - Proper key extraction
   - Fixed duplicate key warnings

### Files Modified

1. **App.tsx**
   - Added Login and Register screens to stack
   - Added Toaster provider
   - Updated navigation configuration

2. **screens/LoginScreen.tsx**
   - New file for handling authentication
   - Form validation and error handling
   - Navigation to main app after login

3. **components/NewsCard.tsx**
   - Added React.memo optimization
   - Implemented comparison function
   - Fixed prop types

4. **screens/HomeScreen.tsx**
   - Added FlatList performance optimizations
   - Fixed duplicate key issues
   - Added proper typing for item rendering

### Git Commits

1. Initial authentication implementation:
   ```
   feat: Implement authentication flow and optimize UI components
   - Add Login screen with form validation and error handling
   - Add toast notifications with Toaster provider
   - Set up proper navigation stack with type safety
   - Implement proper navigation flow from Profile to Login
   - Add platform-specific pull-to-refresh animations
   - Fix various TypeScript issues
   ```

2. Performance optimizations:
   ```
   perf: optimize FlatList performance and fix key warnings
   - Implement React.memo for NewsCard component
   - Add performance optimizations to FlatList configuration
   - Fix duplicate key warnings by ensuring unique IDs
   - Remove unnecessary key props from components
   - Add proper window sizing and batch rendering configs
   - Implement proper key extraction for list items
   ```

### Repository
- URL: https://github.com/unniman123/edushorts2copy.git
- Branch: main

================
File: newfile
================
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

export default function NotificationsScreen() {
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        <Text style={styles.title}>Notifications</Text>
        <Text style={styles.subtitle}>Your recent notifications will appear here.</Text>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  content: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
  },
  title: {
    fontSize: 24,
    color: '#333',
    fontWeight: 'bold',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
  },
});

================
File: package.json
================
{
  "license": "0BSD",
  "main": "index.ts",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo/vector-icons": "latest",
    "@react-native-async-storage/async-storage": "1.23.1",
    "@react-native-community/slider": "^4.5.5",
    "@react-native-masked-view/masked-view": "^0.3.2",
    "@react-navigation/bottom-tabs": "^7.2.1",
    "@react-navigation/native": "^7.0.15",
    "@react-navigation/native-stack": "^7.2.1",
    "@react-navigation/stack": "^7.1.2",
    "@supabase/supabase-js": "latest",
    "expo": "~52.0.37",
    "expo-camera": "latest",
    "expo-linear-gradient": "latest",
    "expo-status-bar": "~2.0.1",
    "lucide-react-native": "latest",
    "react": "18.3.1",
    "react-native": "0.76.7",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-svg": "^15.8.0",
    "sonner-native": "latest"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/babel__core": "^7.20.5",
    "@types/expo": "^32.0.13",
    "@types/react": "~18.3.12",
    "@types/react-native": "^0.72.8",
    "@types/react-navigation": "^3.0.8",
    "expo-module-scripts": "^4.0.4",
    "typescript": "^5.3.3"
  },
  "private": true
}

================
File: screens/AdminDashboardScreen.tsx
================
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  FlatList,
  TextInput,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Feather, MaterialIcons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { mockNewsData } from '../data/mockData';
import { toast } from 'sonner-native';

export default function AdminDashboardScreen() {
  const navigation = useNavigation();
  const [articles, setArticles] = useState(mockNewsData);
  const [searchQuery, setSearchQuery] = useState('');
  const [activeTab, setActiveTab] = useState('analytics');

  const totalUsers = 230;
  const totalArticles = articles.length;
  const totalViews = 12543;
  
  const statCards = [
    {
      title: 'Total Users',
      value: totalUsers,
      icon: <MaterialIcons name="people" size={24} color="#0066cc" />,
      color: '#e3f2fd',
    },
    {
      title: 'Articles',
      value: totalArticles,
      icon: <MaterialIcons name="article" size={24} color="#4caf50" />,
      color: '#e8f5e9',
    },
    {
      title: 'Total Views',
      value: totalViews,
      icon: <MaterialIcons name="visibility" size={24} color="#ff9800" />,
      color: '#fff3e0',
    },
  ];

  const filterArticles = () => {
    if (searchQuery.trim() === '') {
      return articles;
    }
    
    return articles.filter(article => 
      article.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      article.category.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };

  const deleteArticle = (id) => {
    setArticles(articles.filter(article => article.id !== id));
    toast.success('Article deleted successfully');
  };

  const renderAnalyticsTab = () => (
    <ScrollView showsVerticalScrollIndicator={false}>
      <View style={styles.statsContainer}>
        {statCards.map((stat, index) => (
          <View key={index} style={[styles.statCard, { backgroundColor: stat.color }]}>
            <View style={styles.statIconContainer}>
              {stat.icon}
            </View>
            <Text style={styles.statValue}>{stat.value}</Text>
            <Text style={styles.statTitle}>{stat.title}</Text>
          </View>
        ))}
      </View>

      <View style={styles.sectionContainer}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>Recent Activity</Text>
          <TouchableOpacity>
            <Text style={styles.seeAllText}>See All</Text>
          </TouchableOpacity>
        </View>
        
        <View style={styles.activityCard}>
          <View style={styles.activityItem}>
            <MaterialCommunityIcons name="account-plus" size={18} color="#4caf50" />
            <Text style={styles.activityText}>
              <Text style={styles.activityHighlight}>12 new users</Text> registered today
            </Text>
            <Text style={styles.activityTime}>2h ago</Text>
          </View>
          
          <View style={styles.activityItem}>
            <MaterialCommunityIcons name="file-document-edit" size={18} color="#0066cc" />
            <Text style={styles.activityText}>
              <Text style={styles.activityHighlight}>New article</Text> about scholarships published
            </Text>
            <Text style={styles.activityTime}>5h ago</Text>
          </View>
          
          <View style={styles.activityItem}>
            <MaterialCommunityIcons name="alert" size={18} color="#ff9800" />
            <Text style={styles.activityText}>
              <Text style={styles.activityHighlight}>System update</Text> scheduled for tomorrow
            </Text>
            <Text style={styles.activityTime}>1d ago</Text>
          </View>
        </View>
      </View>

      <View style={styles.sectionContainer}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>Popular Categories</Text>
        </View>
        
        <View style={styles.categoryStats}>
          <View style={styles.categoryItem}>
            <View style={styles.categoryBar}>
              <View style={[styles.categoryProgress, { width: '80%', backgroundColor: '#0066cc' }]} />
            </View>
            <View style={styles.categoryDetails}>
              <Text style={styles.categoryName}>Scholarships</Text>
              <Text style={styles.categoryValue}>80%</Text>
            </View>
          </View>
          
          <View style={styles.categoryItem}>
            <View style={styles.categoryBar}>
              <View style={[styles.categoryProgress, { width: '65%', backgroundColor: '#4caf50' }]} />
            </View>
            <View style={styles.categoryDetails}>
              <Text style={styles.categoryName}>Visas</Text>
              <Text style={styles.categoryValue}>65%</Text>
            </View>
          </View>
          
          <View style={styles.categoryItem}>
            <View style={styles.categoryBar}>
              <View style={[styles.categoryProgress, { width: '45%', backgroundColor: '#ff9800' }]} />
            </View>
            <View style={styles.categoryDetails}>
              <Text style={styles.categoryName}>Immigration</Text>
              <Text style={styles.categoryValue}>45%</Text>
            </View>
          </View>
          
          <View style={styles.categoryItem}>
            <View style={styles.categoryBar}>
              <View style={[styles.categoryProgress, { width: '30%', backgroundColor: '#9c27b0' }]} />
            </View>
            <View style={styles.categoryDetails}>
              <Text style={styles.categoryName}>Education</Text>
              <Text style={styles.categoryValue}>30%</Text>
            </View>
          </View>
        </View>
      </View>
    </ScrollView>
  );

  const renderArticlesTab = () => (
    <View style={styles.tabContent}>
      <View style={styles.searchContainer}>
        <Feather name="search" size={20} color="#888" style={styles.searchIcon} />
        <TextInput
          style={styles.searchInput}
          placeholder="Search articles..."
          value={searchQuery}
          onChangeText={setSearchQuery}
        />
      </View>
      
      <View style={styles.listHeader}>
        <TouchableOpacity
          style={styles.addButton}
          onPress={() => navigation.navigate('CreateArticle')}
        >
          <Feather name="plus" size={16} color="white" />
          <Text style={styles.addButtonText}>New Article</Text>
        </TouchableOpacity>
      </View>
      
      <FlatList
        data={filterArticles()}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.articleItem}>
            <View style={styles.articleInfo}>
              <Text style={styles.articleTitle} numberOfLines={1}>{item.title}</Text>
              <View style={styles.articleMeta}>
                <View style={styles.categoryBadge}>
                  <Text style={styles.categoryText}>{item.category}</Text>
                </View>
                <Text style={styles.articleDate}>{item.timeAgo}</Text>
              </View>
            </View>
            <View style={styles.articleActions}>
              <TouchableOpacity
                style={[styles.actionButton, styles.editButton]}
                onPress={() => navigation.navigate('EditArticle', { articleId: item.id })}
              >
                <Feather name="edit-2" size={16} color="#0066cc" />
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.actionButton, styles.deleteButton]}
                onPress={() => deleteArticle(item.id)}
              >
                <Feather name="trash-2" size={16} color="#ff3b30" />
              </TouchableOpacity>
            </View>
          </View>
        )}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.articlesList}
      />
    </View>
  );

  const renderUsersTab = () => (
    <View style={styles.tabContent}>
      <Text style={styles.tabContentText}>User management functionality</Text>
    </View>
  );

  const renderSettingsTab = () => (
    <View style={styles.tabContent}>
      <Text style={styles.tabContentText}>Admin settings functionality</Text>
    </View>
  );

  const renderActiveTab = () => {
    switch (activeTab) {
      case 'analytics':
        return renderAnalyticsTab();
      case 'articles':
        return renderArticlesTab();
      case 'users':
        return renderUsersTab();
      case 'settings':
        return renderSettingsTab();
      default:
        return renderAnalyticsTab();
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Admin Dashboard</Text>
        <TouchableOpacity onPress={() => navigation.navigate('Profile')}>
          <Feather name="user" size={24} color="#333" />
        </TouchableOpacity>
      </View>

      <View style={styles.content}>
        {renderActiveTab()}
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    flexWrap: 'wrap',
    marginBottom: 16,
  },
  statCard: {
    width: '31%',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  statIconContainer: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
  },
  statValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  statTitle: {
    fontSize: 12,
    color: '#666',
    marginTop: 4,
  },
  sectionContainer: {
    marginBottom: 24,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  seeAllText: {
    fontSize: 14,
    color: '#0066cc',
    fontWeight: '500',
  },
  activityCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  activityItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  activityText: {
    flex: 1,
    marginLeft: 12,
    fontSize: 14,
    color: '#333',
  },
  activityHighlight: {
    fontWeight: 'bold',
  },
  activityTime: {
    fontSize: 12,
    color: '#888',
  },
  categoryStats: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  categoryItem: {
    marginBottom: 16,
  },
  categoryBar: {
    height: 8,
    backgroundColor: '#f0f0f0',
    borderRadius: 4,
    marginBottom: 8,
  },
  categoryProgress: {
    height: '100%',
    borderRadius: 4,
  },
  categoryDetails: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  categoryName: {
    fontSize: 14,
    color: '#333',
  },
  categoryValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
  },
  tabContent: {
    flex: 1,
  },
  tabContentText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginTop: 24,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'white',
    borderRadius: 8,
    paddingHorizontal: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  searchIcon: {
    marginRight: 8,
  },
  searchInput: {
    flex: 1,
    height: 48,
    fontSize: 16,
    color: '#333',
  },
  listHeader: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginBottom: 16,
  },
  addButton: {
    backgroundColor: '#0066cc',
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
  },
  addButtonText: {
    color: 'white',
    fontWeight: 'bold',
    marginLeft: 4,
  },
  articlesList: {
    paddingBottom: 16,
  },
  articleItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: 'white',
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  articleInfo: {
    flex: 1,
    marginRight: 16,
  },
  articleTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  articleMeta: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  categoryBadge: {
    backgroundColor: '#0066cc',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
    marginRight: 8,
  },
  categoryText: {
    color: 'white',
    fontSize: 10,
    fontWeight: 'bold',
  },
  articleDate: {
    fontSize: 12,
    color: '#888',
  },
  articleActions: {
    flexDirection: 'row',
  },
  actionButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
  },
  editButton: {
    backgroundColor: '#e3f2fd',
  },
  deleteButton: {
    backgroundColor: '#ffebee',
  },
  tabBar: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderTopWidth: 1,
    borderTopColor: '#eeeeee',
    paddingVertical: 8,
  },
  tabItem: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 8,
  },
  activeTabItem: {
    borderBottomWidth: 2,
    borderBottomColor: '#0066cc',
  },
  tabLabel: {
    fontSize: 12,
    color: '#888',
    marginTop: 4,
  },
  activeTabLabel: {
    color: '#0066cc',
    fontWeight: 'bold',
  },
});

================
File: screens/ArticleDetailScreen.tsx
================
import React, { useState, useEffect } from 'react';
import { RouteProp } from '@react-navigation/native';
import type { NativeStackNavigationProp } from '@react-navigation/native-stack';

type RootStackParamList = {
  ArticleDetail: { articleId: string };
};

type ArticleDetailScreenRouteProp = RouteProp<RootStackParamList, 'ArticleDetail'>;
type ArticleDetailScreenNavigationProp = NativeStackNavigationProp<RootStackParamList>;

interface Article {
  id: string;
  title: string;
  summary: string;
  content: string;
  category: string;
  source: string;
  sourceIconUrl: string;
  imageUrl: string;
  timeAgo: string;
  url: string;
  timestamp: string;
}
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Image,
  TouchableOpacity,
  Share,
  ActivityIndicator,
  Linking,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Feather, Ionicons } from '@expo/vector-icons';
import { useNavigation, useRoute } from '@react-navigation/native';
import { mockNewsData } from '../data/mockData';

export default function ArticleDetailScreen() {
  const navigation = useNavigation<ArticleDetailScreenNavigationProp>();
  const route = useRoute<ArticleDetailScreenRouteProp>();
  const { articleId } = route.params;
  const [article, setArticle] = useState<Article | null>(null);
  const [loading, setLoading] = useState(true);
  const [bookmarked, setBookmarked] = useState(false);

  useEffect(() => {
    // In a real app, we would fetch the article from an API
    const foundArticle = mockNewsData.find(item => item.id === articleId) as Article;
    setArticle(foundArticle || null);
    setLoading(false);
  }, [articleId]);

  const handleShare = async () => {
    try {
      if (!article) return;
      await Share.share({
        message: `Check out this article: ${article.title} ${article.url}`,
      });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  const toggleBookmark = () => {
    setBookmarked(!bookmarked);
    // In a real app, we would update the user's bookmarks in the backend
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#0066cc" />
      </View>
    );
  }

  if (!article) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>Article not found</Text>
        <TouchableOpacity 
          style={styles.backButton} 
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>Go Back</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Feather name="arrow-left" size={24} color="#333" />
        </TouchableOpacity>
        <View style={styles.headerActions}>
          <TouchableOpacity style={styles.actionButton} onPress={toggleBookmark}>
            <Ionicons 
              name={bookmarked ? "bookmark" : "bookmark-outline"} 
              size={24} 
              color={bookmarked ? "#0066cc" : "#333"} 
            />
          </TouchableOpacity>
          <TouchableOpacity style={styles.actionButton} onPress={handleShare}>
            <Feather name="share" size={22} color="#333" />
          </TouchableOpacity>
          <TouchableOpacity style={styles.actionButton}>
            <Feather name="more-horizontal" size={24} color="#333" />
          </TouchableOpacity>
        </View>
      </View>

      <ScrollView showsVerticalScrollIndicator={false}>
        <View style={styles.heroContainer}>
          <Image source={{ uri: article.imageUrl }} style={styles.heroImage} />
          <View style={styles.categoryBadge}>
            <Text style={styles.categoryText}>{article.category}</Text>
          </View>
        </View>

        <View style={styles.contentContainer}>
          <Text style={styles.title}>{article.title}</Text>
          
          <View style={styles.publisherContainer}>
            <Image source={{ uri: article.sourceIconUrl }} style={styles.publisherIcon} />
            <View style={styles.publisherInfo}>
              <Text style={styles.publisherName}>{article.source}</Text>
              <Text style={styles.publishDate}>{article.timeAgo}</Text>
            </View>
          </View>
          
          <Text style={styles.summary}>{article.summary}</Text>
          
          <View style={styles.divider} />
          
          <Text style={styles.content}>{article.content}</Text>
          
          <TouchableOpacity 
            style={styles.sourceLink}
            onPress={() => article.url && Linking.openURL(article.url)}
          >
            <Text style={styles.sourceLinkText}>Read full article on {article.source}</Text>
            <Feather name="external-link" size={16} color="#0066cc" />
          </TouchableOpacity>
        </View>        
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    fontSize: 18,
    color: '#666',
    marginBottom: 20,
  },
  backButton: {
    backgroundColor: '#0066cc',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 6,
  },
  backButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  headerActions: {
    flexDirection: 'row',
  },
  actionButton: {
    marginLeft: 20,
  },
  heroContainer: {
    position: 'relative',
  },
  heroImage: {
    width: '100%',
    height: 250,
  },
  categoryBadge: {
    position: 'absolute',
    bottom: 16,
    left: 16,
    backgroundColor: '#0066cc',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  categoryText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  contentContainer: {
    padding: 16,
  },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 16,
  },
  publisherContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  publisherIcon: {
    width: 36,
    height: 36,
    borderRadius: 18,
    marginRight: 10,
  },
  publisherInfo: {
    flex: 1,
  },
  publisherName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
  },
  publishDate: {
    fontSize: 12,
    color: '#888',
  },
  summary: {
    fontSize: 16,
    fontWeight: '500',
    color: '#444',
    lineHeight: 24,
    marginBottom: 16,
  },
  divider: {
    height: 1,
    backgroundColor: '#eee',
    marginVertical: 16,
  },
  content: {
    fontSize: 16,
    color: '#333',
    lineHeight: 24,
    marginBottom: 24,
  },
  sourceLink: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 24,
  },
  sourceLinkText: {
    fontSize: 14,
    color: '#0066cc',
    marginRight: 4,
  },
  relatedSection: {
    padding: 16,
    backgroundColor: '#f8f9fa',
  },
  relatedTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  relatedArticlesContainer: {
    paddingBottom: 16,
  },
  relatedArticleCard: {
    width: 250,
    backgroundColor: 'white',
    borderRadius: 12,
    overflow: 'hidden',
    marginRight: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  relatedArticleImage: {
    width: '100%',
    height: 130,
  },
  relatedArticleContent: {
    padding: 12,
  },
  relatedArticleTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 6,
  },
  relatedArticleSource: {
    fontSize: 12,
    color: '#888',
  },
});

================
File: screens/BookmarksScreen.tsx
================
import React, { useState, memo } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  Image,
  ActivityIndicator,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Feather } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { mockNewsData } from '../data/mockData';
import { AccessibilityProps } from '../types/accessibility';
import EmptyState from '../components/EmptyState';

type RootStackParamList = {
  Home: undefined;
  ArticleDetail: { articleId: string };
};

type NavigationProp = StackNavigationProp<RootStackParamList>;

const BookmarksScreen = () => {
  const navigation = useNavigation<NavigationProp>();
  const [bookmarkedArticles, setBookmarkedArticles] = useState(mockNewsData.slice(0, 3));
  const [loading, setLoading] = useState(false);

  const removeBookmark = (articleId: string) => {
    setBookmarkedArticles(bookmarkedArticles.filter(article => article.id !== articleId));
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity 
          onPress={() => navigation.goBack()}
          accessible={true}
          accessibilityLabel="Go back"
          accessibilityHint="Returns to the previous screen"
        >
          <Feather name="arrow-left" size={24} color="#333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Saved Articles</Text>
        <TouchableOpacity
          accessible={true}
          accessibilityLabel="More options"
          accessibilityHint="Shows additional options for saved articles"
        >
          <Feather name="more-horizontal" size={24} color="#333" />
        </TouchableOpacity>
      </View>

      {bookmarkedArticles.length === 0 ? (
        <View style={styles.emptyContainer}>
          <EmptyState
            icon="bookmark"
            title="No Saved Articles"
            subtitle="Articles you save will appear here for easy access"
          />
          <TouchableOpacity 
            style={styles.browseButton}
            onPress={() => navigation.navigate('Home')}
            accessible={true}
            accessibilityLabel="Browse Articles"
            accessibilityHint="Click to explore available articles"
          >
            <Text style={styles.browseButtonText}>Browse Articles</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <FlatList
          data={bookmarkedArticles}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <View style={styles.articleCard}>
              <TouchableOpacity 
                style={styles.articleContent}
                onPress={() => navigation.navigate('ArticleDetail', { articleId: item.id })}
                accessible={true}
                accessibilityLabel={`Article: ${item.title}`}
                accessibilityHint="Click to read the full article"
              >
                <Image source={{ uri: item.imageUrl }} style={styles.articleImage} />
                <View style={styles.articleDetails}>
                  <View style={styles.categoryBadge}>
                    <Text style={styles.categoryText}>{item.category}</Text>
                  </View>
                  <Text style={styles.articleTitle} numberOfLines={2}>{item.title}</Text>
                  <View style={styles.articleMeta}>
                    <Text style={styles.sourceText}>{item.source}</Text>
                    <Text style={styles.timeText}>{item.timeAgo}</Text>
                  </View>
                </View>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.removeButton}
                onPress={() => removeBookmark(item.id)}
                accessible={true}
                accessibilityLabel={`Remove ${item.title} from bookmarks`}
                accessibilityHint="Click to remove this article from your saved articles"
              >
                <Feather name="trash-2" size={18} color="#ff3b30" />
              </TouchableOpacity>
            </View>
          )}
          showsVerticalScrollIndicator={false}
          contentContainerStyle={styles.list}
          ListFooterComponent={loading ? (
            <ActivityIndicator size="large" color="#0066cc" style={styles.loader} />
          ) : null}
          windowSize={5}
          maxToRenderPerBatch={5}
          removeClippedSubviews={true}
          initialNumToRender={10}
        />
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 24,
  },
  browseButton: {
    backgroundColor: '#0066cc',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    marginTop: 24,
  },
  browseButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  list: {
    padding: 16,
  },
  articleCard: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderRadius: 12,
    overflow: 'hidden',
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  articleContent: {
    flex: 1,
    flexDirection: 'row',
  },
  articleImage: {
    width: 100,
    height: 100,
  },
  articleDetails: {
    flex: 1,
    padding: 12,
    justifyContent: 'space-between',
  },
  categoryBadge: {
    backgroundColor: '#0066cc',
    alignSelf: 'flex-start',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
    marginBottom: 6,
  },
  categoryText: {
    color: 'white',
    fontSize: 10,
    fontWeight: 'bold',
  },
  articleTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 6,
  },
  articleMeta: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  sourceText: {
    fontSize: 12,
    color: '#666',
  },
  timeText: {
    fontSize: 10,
    color: '#888',
  },
  removeButton: {
    padding: 16,
    justifyContent: 'center',
    borderLeftWidth: 1,
    borderLeftColor: '#eeeeee',
  },
  loader: {
    marginVertical: 16,
  },
});

export default memo(BookmarksScreen);

================
File: screens/DiscoverScreen.tsx
================
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  FlatList,
  TouchableOpacity,
  Image,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Feather, Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import CategorySelector from '../components/CategorySelector';
import { mockNewsData } from '../data/mockData';

export default function DiscoverScreen() {
  const navigation = useNavigation();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [searchResults, setSearchResults] = useState(mockNewsData);

  const handleSearch = (text) => {
    setSearchQuery(text);
    if (text.trim() === '') {
      setSearchResults(mockNewsData);
      return;
    }
    
    const filtered = mockNewsData.filter(
      (item) => 
        item.title.toLowerCase().includes(text.toLowerCase()) ||
        item.summary.toLowerCase().includes(text.toLowerCase()) ||
        item.content.toLowerCase().includes(text.toLowerCase())
    );
    setSearchResults(filtered);
  };

  const filterByCategory = (category) => {
    setSelectedCategory(category);
    if (category === 'All') {
      setSearchResults(mockNewsData);
      return;
    }
    
    const filtered = mockNewsData.filter(item => item.category === category);
    setSearchResults(filtered);
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Feather name="arrow-left" size={24} color="#333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Discover</Text>
        <View style={{ width: 24 }} />
      </View>
      
      <Text style={styles.subtitle}>News from all around the world</Text>
      
      <View style={styles.searchContainer}>
        <Feather name="search" size={20} color="#888" style={styles.searchIcon} />
        <TextInput
          style={styles.searchInput}
          placeholder="Search for news..."
          value={searchQuery}
          onChangeText={handleSearch}
        />
        <TouchableOpacity style={styles.filterButton}>
          <Feather name="sliders" size={20} color="#0066cc" />
        </TouchableOpacity>
      </View>
      
      <View style={styles.categoryContainer}>
        <CategorySelector 
          selectedCategory={selectedCategory}
          onSelectCategory={filterByCategory}
        />
      </View>
      
      <FlatList
        data={searchResults}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity 
            style={styles.resultItem}
            onPress={() => navigation.navigate('ArticleDetail', { articleId: item.id })}
          >
            <Image source={{ uri: item.imageUrl }} style={styles.resultImage} />
            <View style={styles.resultContent}>
              <View style={styles.categoryWrapper}>
                <Text style={styles.categoryLabel}>{item.category}</Text>
              </View>
              <Text style={styles.resultTitle} numberOfLines={2}>{item.title}</Text>
              <View style={styles.resultMeta}>
                <Image source={{ uri: item.sourceIconUrl }} style={styles.sourceIcon} />
                <Text style={styles.sourceText}>{item.source}</Text>
                <Text style={styles.timeText}> • {item.timeAgo}</Text>
              </View>
            </View>
          </TouchableOpacity>
        )}
        contentContainerStyle={styles.resultsList}
        showsVerticalScrollIndicator={false}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  subtitle: {
    fontSize: 14,
    color: '#666',
    marginHorizontal: 16,
    marginBottom: 16,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'white',
    borderRadius: 12,
    marginHorizontal: 16,
    marginBottom: 16,
    paddingHorizontal: 12,
    paddingVertical: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  searchIcon: {
    marginRight: 8,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    color: '#333',
    paddingVertical: 8,
  },
  filterButton: {
    padding: 4,
  },
  categoryContainer: {
    marginBottom: 16,
    paddingHorizontal: 16,
  },
  resultsList: {
    paddingHorizontal: 16,
    paddingBottom: 16,
  },
  resultItem: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderRadius: 12,
    overflow: 'hidden',
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  resultImage: {
    width: 120,
    height: 120,
  },
  resultContent: {
    flex: 1,
    padding: 12,
    justifyContent: 'space-between',
  },
  categoryWrapper: {
    backgroundColor: '#0066cc',
    alignSelf: 'flex-start',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
    marginBottom: 8,
  },
  categoryLabel: {
    color: 'white',
    fontSize: 10,
    fontWeight: 'bold',
  },
  resultTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  resultMeta: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  sourceIcon: {
    width: 16,
    height: 16,
    borderRadius: 8,
    marginRight: 4,
  },
  sourceText: {
    fontSize: 12,
    color: '#666',
  },
  timeText: {
    fontSize: 12,
    color: '#888',
  },
});

================
File: screens/HomeScreen.tsx
================
import React, { useState, useCallback } from 'react';
import type { ListRenderItem } from 'react-native';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  RefreshControl,
  Image,
  ActivityIndicator,
  Platform,
  Animated,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Feather } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import NewsCard from '../components/NewsCard';
import CategorySelector from '../components/CategorySelector';
import { mockNewsData } from '../data/mockData';

export type RootStackParamList = {
  Main: undefined;
  Home: undefined;
  Discover: undefined;
  ArticleDetail: { articleId: string };
  Notifications: undefined;
  Bookmarks: undefined;
  Profile: undefined;
  AdminDashboard: undefined;
  Login: undefined;
  Register: undefined;
};

export type NewsItem = {
  id: string;
  title: string;
  summary: string;
  category: string;
  source: string;
  timeAgo: string;
  imageUrl: string;
  sourceIconUrl: string;
  url: string;
};

// Pre-calculate item dimensions
const ITEM_HEIGHT = 150; // Fixed height for each news card

export default function HomeScreen() {
  const navigation = useNavigation<StackNavigationProp<RootStackParamList>>();
  const [news, setNews] = useState<NewsItem[]>(mockNewsData);
  const [refreshing, setRefreshing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('All');

  const onRefresh = useCallback(() => {
    setRefreshing(true);
    
    // Simulate fetch delay
    setTimeout(() => {
      setRefreshing(false);
      // Simulate refreshed data by reversing the order
      setNews([...mockNewsData].reverse());
    }, 2000);
  }, []);

  const loadMoreData = () => {
    if (loading) return;
    setLoading(true);
    // Simulate loading more data with unique IDs
    setTimeout(() => {
      const newData = mockNewsData.slice(0, 3).map(item => ({
        ...item,
        id: `${item.id}-${Date.now()}-${Math.random()}`
      }));
      setNews([...news, ...newData]);
      setLoading(false);
    }, 1000);
  };

  const filterNewsByCategory = (category: string) => {
    setSelectedCategory(category);
  };

  const renderFooter = () => {
    if (!loading) return null;
    return (
      <View style={styles.loaderContainer}>
        <ActivityIndicator size="large" color="#0066cc" />
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.logo}>Edushorts </Text>
        <View style={styles.headerIcons}>
          <TouchableOpacity onPress={() => navigation.navigate('Discover')}>
            <View>
              <Feather name="search" size={24} color="#333" style={styles.icon} />
            </View>
          </TouchableOpacity>
          <TouchableOpacity onPress={() => navigation.navigate('Notifications')}>
            <View>
              <Feather name="bell" size={24} color="#333" style={styles.icon} />
            </View>
          </TouchableOpacity>
        </View>
      </View>

      <View style={styles.content}>
        <Text style={styles.sectionTitle}>Breaking News</Text>
        {news && news.length > 0 && (
          <View style={styles.featuredNewsContainer}>
            <TouchableOpacity 
              style={styles.featuredNews}
              onPress={() => navigation.navigate('ArticleDetail', { articleId: news[0].id })}
            >
              <Image
                source={{ uri: `https://api.a0.dev/assets/image?text=students%20at%20university%20campus&aspect=16:9&seed=1` }}
                style={styles.featuredImage}
              />
              <View style={styles.featuredNewsOverlay}>
                <View style={styles.categoryBadge}>
                  <Text style={styles.categoryText}>Education</Text>
                </View>
                <Text style={styles.featuredNewsTitle}>{news[0].title}</Text>
                <View style={styles.newsMetaData}>
                  <Text style={styles.newsSource}>{news[0].source}</Text>
                  <Text style={styles.newsTime}>{news[0].timeAgo}</Text>
                </View>
              </View>
            </TouchableOpacity>
          </View>
        )}

        <View style={styles.categoryContainer}>
          <CategorySelector 
            selectedCategory={selectedCategory}
            onSelectCategory={filterNewsByCategory}
          />
        </View>

        <FlatList
          data={news.slice(1)}
          keyExtractor={useCallback((item: NewsItem) => item.id.toString(), [])}
          renderItem={useCallback<ListRenderItem<NewsItem>>(({ item }) => (
            item ? <NewsCard article={item} /> : null
          ), [])}
          showsVerticalScrollIndicator={false}
          refreshControl={
            Platform.select({
              ios: (
                <RefreshControl
                  refreshing={refreshing}
                  onRefresh={onRefresh}
                  tintColor="#0066cc"
                />
              ),
              android: (
                <RefreshControl
                  refreshing={refreshing}
                  onRefresh={onRefresh}
                  colors={['#0066cc', '#00cc99']}
                  progressBackgroundColor="#ffffff"
                  progressViewOffset={20}
                />
              ),
            })
          }
          // Performance optimizations
          windowSize={5}
          maxToRenderPerBatch={5}
          updateCellsBatchingPeriod={50}
          removeClippedSubviews={true}
          initialNumToRender={10}
          getItemLayout={useCallback((_: ArrayLike<NewsItem> | null | undefined, index: number) => ({
            length: ITEM_HEIGHT,
            offset: ITEM_HEIGHT * index,
            index,
          }), [])}
          maintainVisibleContentPosition={{
            minIndexForVisible: 0,
            autoscrollToTopThreshold: 10,
          }}
          onEndReached={loadMoreData}
          onEndReachedThreshold={0.5}
          ListFooterComponent={renderFooter}
          contentContainerStyle={styles.newsList}
        />
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
    backgroundColor: '#ffffff',
  },
  logo: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#0066cc',
  },
  headerIcons: {
    flexDirection: 'row',
  },
  icon: {
    marginLeft: 20,
  },
  content: {
    flex: 1,
    padding: 16,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 12,
    color: '#333',
  },
  featuredNewsContainer: {
    height: 200,
    marginBottom: 20,
    borderRadius: 12,
    overflow: 'hidden',
  },
  featuredNews: {
    flex: 1,
    position: 'relative',
    height: ITEM_HEIGHT, // Fixed height for consistent layout
  },
  featuredImage: {
    width: '100%',
    height: '100%',
    borderRadius: 12,
  },
  featuredNewsOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: 16,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    borderBottomLeftRadius: 12,
    borderBottomRightRadius: 12,
  },
  categoryBadge: {
    backgroundColor: '#0066cc',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
    alignSelf: 'flex-start',
    marginBottom: 6,
  },
  categoryText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  featuredNewsTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 6,
  },
  newsMetaData: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  newsSource: {
    color: 'white',
    fontSize: 12,
  },
  newsTime: {
    color: 'white',
    fontSize: 12,
  },
  categoryContainer: {
    marginBottom: 15,
  },
  newsList: {
    paddingBottom: 16,
  },  loaderContainer: {
    marginVertical: 16,
    alignItems: 'center',
  },
  activeTab: {
    color: '#0066cc',
    fontWeight: 'bold',
  },
});

================
File: screens/LoginScreen.tsx
================
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  Image,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Feather } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { mockUsers } from '../data/mockData';
import { toast } from 'sonner-native';
import { RootStackParamList } from './HomeScreen';

export default function LoginScreen() {
  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = () => {
    if (!email || !password) {
      toast.error('Please enter both email and password');
      return;
    }

    setIsLoading(true);
    
    // Simulate API call delay
    setTimeout(() => {
      const user = mockUsers.find(
        user => user.email === email && user.password === password
      );
      
      if (user) {
        toast.success('Login successful!');
        navigation.navigate('Main');
      } else {
        toast.error('Invalid email or password');
      }
      
      setIsLoading(false);
    }, 1500);
  };

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardAvoidingView}
      >
        <ScrollView 
          contentContainerStyle={styles.scrollContainer}
          showsVerticalScrollIndicator={false}
        >
          <View style={styles.logoContainer}>
            <Image
              source={{ uri: 'https://api.a0.dev/assets/image?text=GlobalEdu%20News%20Logo&aspect=1:1&seed=123' }}
              style={styles.logo}
            />
            <Text style={styles.logoText}>Edushorts</Text>
          </View>
          
          <Text style={styles.welcomeText}>Welcome Back!</Text>
          <Text style={styles.subtitle}>Login to access personalized news for international students</Text>
          
          <View style={styles.formContainer}>
            <View style={styles.inputContainer}>
              <Feather name="mail" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Email Address"
                placeholderTextColor="#888"
                keyboardType="email-address"
                autoCapitalize="none"
                value={email}
                onChangeText={setEmail}
              />
            </View>
            
            <View style={styles.inputContainer}>
              <Feather name="lock" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Password"
                placeholderTextColor="#888"
                secureTextEntry={!showPassword}
                value={password}
                onChangeText={setPassword}
              />
              <TouchableOpacity
                style={styles.eyeIcon}
                onPress={() => setShowPassword(!showPassword)}
              >
                <Feather name={showPassword ? "eye-off" : "eye"} size={20} color="#888" />
              </TouchableOpacity>
            </View>
            
            <TouchableOpacity style={styles.forgotPassword}>
              <Text style={styles.forgotPasswordText}>Forgot Password?</Text>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={[styles.loginButton, isLoading && styles.loginButtonDisabled]}
              onPress={handleLogin}
              disabled={isLoading}
            >
              {isLoading ? (
                <Text style={styles.loginButtonText}>Logging in...</Text>
              ) : (
                <Text style={styles.loginButtonText}>Login</Text>
              )}
            </TouchableOpacity>
            
            <View style={styles.orContainer}>
              <View style={styles.divider} />
              <Text style={styles.orText}>OR</Text>
              <View style={styles.divider} />
            </View>
            
            <View style={styles.socialButtonsContainer}>
              <TouchableOpacity style={styles.socialButton}>
                <Feather name="github" size={20} color="#333" />
                <Text style={styles.socialButtonText}>GitHub</Text>
              </TouchableOpacity>
              
              <TouchableOpacity style={styles.socialButton}>
                <Feather name="twitter" size={20} color="#1DA1F2" />
                <Text style={styles.socialButtonText}>Twitter</Text>
              </TouchableOpacity>
            </View>
          </View>
          
          <View style={styles.registerContainer}>
            <Text style={styles.registerText}>Don't have an account?</Text>
            <TouchableOpacity onPress={() => navigation.navigate('Register')}>
              <Text style={styles.registerLink}>Sign Up</Text>
            </TouchableOpacity>
          </View>
          
          <TouchableOpacity 
            style={styles.guestButton}
            onPress={() => navigation.navigate('Main')}
          >
            <Text style={styles.guestButtonText}>Continue as Guest</Text>
          </TouchableOpacity>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  keyboardAvoidingView: {
    flex: 1,
  },
  scrollContainer: {
    flexGrow: 1,
    padding: 24,
    justifyContent: 'center',
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 32,
  },
  logo: {
    width: 80,
    height: 80,
    borderRadius: 40,
  },
  logoText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#0066cc',
    marginTop: 12,
  },
  welcomeText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 14,
    color: '#666',
    marginBottom: 32,
  },
  formContainer: {
    marginBottom: 24,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    borderRadius: 12,
    paddingHorizontal: 16,
    marginBottom: 16,
    height: 56,
  },
  inputIcon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  eyeIcon: {
    padding: 4,
  },
  forgotPassword: {
    alignSelf: 'flex-end',
    marginBottom: 24,
  },
  forgotPasswordText: {
    fontSize: 14,
    color: '#0066cc',
  },
  loginButton: {
    backgroundColor: '#0066cc',
    borderRadius: 12,
    height: 56,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 16,
  },
  loginButtonDisabled: {
    opacity: 0.7,
  },
  loginButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: 'white',
  },
  orContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 16,
  },
  divider: {
    flex: 1,
    height: 1,
    backgroundColor: '#eeeeee',
  },
  orText: {
    color: '#888',
    marginHorizontal: 16,
  },
  socialButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  socialButton: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    borderRadius: 12,
    height: 56,
    flex: 0.48,
  },
  socialButtonText: {
    marginLeft: 8,
    fontSize: 14,
    color: '#333',
  },
  registerContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 24,
  },
  registerText: {
    fontSize: 14,
    color: '#666',
  },
  registerLink: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#0066cc',
    marginLeft: 4,
  },
  guestButton: {
    borderWidth: 1,
    borderColor: '#eeeeee',
    borderRadius: 12,
    height: 48,
    justifyContent: 'center',
    alignItems: 'center',
  },
  guestButtonText: {
    fontSize: 14,
    color: '#666',
  },
});

================
File: screens/NotificationsScreen.tsx
================
import React from 'react';
    import { View, Text, StyleSheet } from 'react-native';
    import { SafeAreaView } from 'react-native-safe-area-context';
    
    export default function NotificationsScreen() {
      return (
        <SafeAreaView style={styles.container}>
          <View style={styles.content}>
            <Text style={styles.title}>Notifications</Text>
            <Text style={styles.subtitle}>Your recent notifications will appear here.</Text>
          </View>
        </SafeAreaView>
      );
    }
    
    const styles = StyleSheet.create({
      container: {
        flex: 1,
        backgroundColor: '#ffffff',
      },
      content: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        padding: 16,
      },
      title: {
        fontSize: 24,
        color: '#333',
        fontWeight: 'bold',
        marginBottom: 8,
      },
      subtitle: {
        fontSize: 16,
        color: '#666',
      },
    });

================
File: screens/ProfileScreen.tsx
================
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TouchableOpacity,
  Switch,
  ScrollView,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Feather, MaterialIcons, Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';

type RootStackParamList = {
  Login: undefined;
  EditProfile: undefined;
  Bookmarks: undefined;
  ChangePassword: undefined;
  HelpSupport: undefined;
  AboutUs: undefined;
  PrivacyPolicy: undefined;
};

type ProfileScreenNavigationProp = NativeStackNavigationProp<RootStackParamList>;
import { mockUsers } from '../data/mockData';
import { toast } from 'sonner-native';

export default function ProfileScreen() {
  const navigation = useNavigation<ProfileScreenNavigationProp>();
  const [user, setUser] = useState(mockUsers[0]); // Using first user as example
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [darkModeEnabled, setDarkModeEnabled] = useState(false);
  
  const handleLogout = () => {
    toast.success('Logged out successfully');
    navigation.navigate('Login');
  };

  const renderSettingsItem = (
    icon: React.ReactNode,
    title: string,
    subtitle: string | undefined,
    rightElement: React.ReactNode,
    onPress: () => void
  ) => (
    <TouchableOpacity style={styles.settingsItem} onPress={onPress}>
      <View style={styles.settingsItemLeft}>
        <View style={styles.settingsIconContainer}>
          {icon}
        </View>
        <View style={styles.settingsTextContainer}>
          <Text style={styles.settingsItemTitle}>{title}</Text>
          {subtitle && <Text style={styles.settingsItemSubtitle}>{subtitle}</Text>}
        </View>
      </View>
      <View style={styles.settingsItemRight}>
        {rightElement}
      </View>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Profile</Text>
        <TouchableOpacity 
          style={styles.editButton}
          onPress={() => navigation.navigate('EditProfile')}
        >
          <Feather name="edit-2" size={16} color="#0066cc" />
          <Text style={styles.editButtonText}>Edit</Text>
        </TouchableOpacity>
      </View>

      <ScrollView showsVerticalScrollIndicator={false}>
        <View style={styles.profileSection}>
          <Image
            source={{ uri: 'https://api.a0.dev/assets/image?text=profile%20picture&aspect=1:1&seed=42' }}
            style={styles.profileImage}
          />
          <Text style={styles.userName}>{user.name}</Text>
          <Text style={styles.userEmail}>{user.email}</Text>
          <View style={styles.statsContainer}>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{user.savedArticles.length}</Text>
              <Text style={styles.statLabel}>Saved</Text>
            </View>
            <View style={styles.statSeparator} />
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{user.readingHistory.length}</Text>
              <Text style={styles.statLabel}>Read</Text>
            </View>
          </View>
        </View>

        <View style={styles.settingsSection}>
          <Text style={styles.sectionTitle}>Preferences</Text>
          {renderSettingsItem(
            <Ionicons name="notifications-outline" size={22} color="#333" />,
            'Push Notifications',
            'Get notified about important news',
            <Switch
              value={notificationsEnabled}
              onValueChange={setNotificationsEnabled}
              trackColor={{ false: '#d1d1d1', true: '#0066cc' }}
              thumbColor="#ffffff"
            />,
            () => {}
          )}
          
          {renderSettingsItem(
            <Ionicons name="moon-outline" size={22} color="#333" />,
            'Dark Mode',
            'Change app appearance',
            <Switch
              value={darkModeEnabled}
              onValueChange={setDarkModeEnabled}
              trackColor={{ false: '#d1d1d1', true: '#0066cc' }}
              thumbColor="#ffffff"
            />,
            () => {}
          )}
          
        </View>

        <View style={styles.settingsSection}>
          <Text style={styles.sectionTitle}>Account</Text>
          {renderSettingsItem(
            <Ionicons name="bookmark-outline" size={22} color="#333" />,
            'Saved Articles',
            'View your bookmarks',
            <Feather name="chevron-right" size={20} color="#888" />,
            () => navigation.navigate('Bookmarks')
          )}
          
          {renderSettingsItem(
            <Ionicons name="lock-closed-outline" size={22} color="#333" />,
            'Change Password',
            'Update your security credentials',
            <Feather name="chevron-right" size={20} color="#888" />,
            () => navigation.navigate('ChangePassword')
          )}
        </View>

        <View style={styles.settingsSection}>
          <Text style={styles.sectionTitle}>Support</Text>
          {renderSettingsItem(
            <Ionicons name="help-circle-outline" size={22} color="#333" />,
            'Help & Support',
            'Get assistance and find answers',
            <Feather name="chevron-right" size={20} color="#888" />,
            () => navigation.navigate('HelpSupport')
          )}
          
          {renderSettingsItem(
            <Ionicons name="information-circle-outline" size={22} color="#333" />,
            'About Us',
            'Learn more about Edushorts',
            <Feather name="chevron-right" size={20} color="#888" />,
            () => navigation.navigate('AboutUs')
          )}
          
          {renderSettingsItem(
            <Ionicons name="shield-checkmark-outline" size={22} color="#333" />,
            'Privacy Policy',
            'Review our privacy terms',
            <Feather name="chevron-right" size={20} color="#888" />,
            () => navigation.navigate('PrivacyPolicy')
          )}
        </View>

        <TouchableOpacity 
          style={styles.logoutButton}
          onPress={handleLogout}
        >
          <Ionicons name="log-out-outline" size={22} color="#ff3b30" />
          <Text style={styles.logoutText}>Logout</Text>
        </TouchableOpacity>

        <Text style={styles.versionText}>Version 1.0.0</Text>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  editButton: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  editButtonText: {
    marginLeft: 4,
    fontSize: 14,
    color: '#0066cc',
    fontWeight: '500',
  },
  profileSection: {
    backgroundColor: '#ffffff',
    alignItems: 'center',
    padding: 24,
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
  },
  profileImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 16,
  },
  userName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  userEmail: {
    fontSize: 14,
    color: '#666',
    marginBottom: 16,
  },
  statsContainer: {
    flexDirection: 'row',
    width: '60%',
    justifyContent: 'space-between',
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  statLabel: {
    fontSize: 12,
    color: '#666',
  },
  statSeparator: {
    width: 1,
    height: '80%',
    backgroundColor: '#eeeeee',
  },
  settingsSection: {
    marginTop: 24,
    backgroundColor: '#ffffff',
    borderRadius: 12,
    overflow: 'hidden',
    marginHorizontal: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
  },
  settingsItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 16,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
  },
  settingsItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  settingsIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#f5f5f5',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  settingsTextContainer: {
    flex: 1,
  },
  settingsItemTitle: {
    fontSize: 16,
    color: '#333',
    marginBottom: 2,
  },
  settingsItemSubtitle: {
    fontSize: 12,
    color: '#888',
  },
  settingsItemRight: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  logoutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#ffffff',
    marginHorizontal: 16,
    marginBottom: 24,
    marginTop: 8,
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  logoutText: {
    marginLeft: 8,
    fontSize: 16,
    fontWeight: '500',
    color: '#ff3b30',
  },
  versionText: {
    textAlign: 'center',
    fontSize: 12,
    color: '#888',
    marginBottom: 24,
  }
});

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "isolatedModules": true,
    "jsx": "react-native",
    "lib": [
      "es2017"
    ],
    "moduleResolution": "node",
    "noEmit": true,
    "strict": true,
    "target": "esnext",
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "baseUrl": "."
  },
  "include": [
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules",
    "babel.config.js",
    "metro.config.js",
    "jest.config.js"
  ],
  "extends": "expo/tsconfig.base"
}

================
File: types/accessibility.ts
================
export interface AccessibilityProps {
  accessible: boolean;
  accessibilityLabel: string;
  accessibilityHint: string;
}



================================================================
End of Codebase
================================================================
